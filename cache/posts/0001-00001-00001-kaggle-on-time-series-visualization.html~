<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org860a667">Introduction</a></li>
<li><a href="#org97f59df">Set Up</a></li>
<li><a href="#org4ddcdef">The Data</a></li>
<li><a href="#orga25794d">Grouping</a></li>
<li><a href="#org45b3c3d">Lag Plots</a></li>
<li><a href="#org66b225f">Autcorrelation Plot</a></li>
<li><a href="#orgd202a2a">Cryptocurrency</a></li>
</ul>
</div>
</div>
<div id="outline-container-org860a667" class="outline-2">
<h2 id="org860a667">Introduction</h2>
<div class="outline-text-2" id="text-org860a667">
<p>
This is a walk-through of the kaggle notebook on <a href="https://www.kaggle.com/residentmario/time-series-plotting-optional">Time-Series Plotting</a> by Aleksey Bilogur.
</p>
</div>
</div>
<div id="outline-container-org97f59df" class="outline-2">
<h2 id="org97f59df">Set Up</h2>
<div class="outline-text-2" id="text-org97f59df">
</div>
<div id="outline-container-org2f37ab1" class="outline-3">
<h3 id="org2f37ab1">Imports</h3>
<div class="outline-text-3" id="text-org2f37ab1">
</div>
<div id="outline-container-org6eace08" class="outline-4">
<h4 id="org6eace08">From Python</h4>
<div class="outline-text-4" id="text-org6eace08">
<div class="highlight"><pre><span></span>from datetime import datetime
from functools import partial
from pathlib import Path
import os
</pre></div>
</div>
</div>
<div id="outline-container-org81bf937" class="outline-4">
<h4 id="org81bf937">From PyPi</h4>
<div class="outline-text-4" id="text-org81bf937">
<div class="highlight"><pre><span></span>from dotenv import load_dotenv
from pandas.plotting import autocorrelation_plot, lag_plot
from tabulate import tabulate
import matplotlib.pyplot as pyplot
import pandas
import seaborn
</pre></div>
</div>
</div>
</div>
<div id="outline-container-org5df13ae" class="outline-3">
<h3 id="org5df13ae">Plotting</h3>
<div class="outline-text-3" id="text-org5df13ae">
<div class="highlight"><pre><span></span>get_ipython().run_line_magic(&#39;matplotlib&#39;, &#39;inline&#39;)
get_ipython().run_line_magic(&#39;config&#39;, &quot;InlineBackend.figure_format = &#39;retina&#39;&quot;)
seaborn.set(style=&quot;whitegrid&quot;,
	    rc={&quot;axes.grid&quot;: False,
		&quot;font.family&quot;: [&quot;sans-serif&quot;],
		&quot;font.sans-serif&quot;: [&quot;Open Sans&quot;, &quot;Latin Modern Sans&quot;, &quot;Lato&quot;],
		&quot;figure.figsize&quot;: (8, 6)},
	    font_scale=1)
</pre></div>
</div>
</div>
<div id="outline-container-orgbf30cc5" class="outline-3">
<h3 id="orgbf30cc5">Setup Libraries</h3>
<div class="outline-text-3" id="text-orgbf30cc5">
<div class="highlight"><pre><span></span>load_dotenv()
table = partial(tabulate, headers=&quot;keys&quot;, tablefmt=&quot;orgtbl&quot;)
kaggle_path = Path(os.environ.get(&quot;KAGGLE&quot;)).expanduser()
assert kaggle_path.is_dir()
</pre></div>
</div>
</div>
</div>
<div id="outline-container-org4ddcdef" class="outline-2">
<h2 id="org4ddcdef">The Data</h2>
<div class="outline-text-2" id="text-org4ddcdef">
</div>
<div id="outline-container-org9c7b237" class="outline-3">
<h3 id="org9c7b237">New York Stock Exchange Prices</h3>
<div class="outline-text-3" id="text-org9c7b237">
<div class="highlight"><pre><span></span>nyse_path = kaggle_path.joinpath(&quot;nyse/prices.csv&quot;)
assert nyse_path.is_file()
nyse = pandas.read_csv(nyse_path, parse_dates=[&quot;date&quot;])
</pre></div>

<div class="highlight"><pre><span></span>nyse.info()
</pre></div>

<pre class="example">
&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 851264 entries, 0 to 851263
Data columns (total 7 columns):
date      851264 non-null datetime64[ns]
symbol    851264 non-null object
open      851264 non-null float64
close     851264 non-null float64
low       851264 non-null float64
high      851264 non-null float64
volume    851264 non-null float64
dtypes: datetime64[ns](1), float64(5), object(1)
memory usage: 45.5+ MB
</pre>

<div class="highlight"><pre><span></span>nyse = nyse.set_index(&quot;date&quot;)
print(table(nyse.head()))
</pre></div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />

<col  class="org-right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">date</th>
<th scope="col" class="org-left">symbol</th>
<th scope="col" class="org-right">open</th>
<th scope="col" class="org-right">close</th>
<th scope="col" class="org-right">low</th>
<th scope="col" class="org-right">high</th>
<th scope="col" class="org-right">volume</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">2016-01-05 00:00:00</td>
<td class="org-left">WLTW</td>
<td class="org-right">123.43</td>
<td class="org-right">125.84</td>
<td class="org-right">122.31</td>
<td class="org-right">126.25</td>
<td class="org-right">2.1636e+06</td>
</tr>

<tr>
<td class="org-left">2016-01-06 00:00:00</td>
<td class="org-left">WLTW</td>
<td class="org-right">125.24</td>
<td class="org-right">119.98</td>
<td class="org-right">119.94</td>
<td class="org-right">125.54</td>
<td class="org-right">2.3864e+06</td>
</tr>

<tr>
<td class="org-left">2016-01-07 00:00:00</td>
<td class="org-left">WLTW</td>
<td class="org-right">116.38</td>
<td class="org-right">114.95</td>
<td class="org-right">114.93</td>
<td class="org-right">119.74</td>
<td class="org-right">2.4895e+06</td>
</tr>

<tr>
<td class="org-left">2016-01-08 00:00:00</td>
<td class="org-left">WLTW</td>
<td class="org-right">115.48</td>
<td class="org-right">116.62</td>
<td class="org-right">113.5</td>
<td class="org-right">117.44</td>
<td class="org-right">2.0063e+06</td>
</tr>

<tr>
<td class="org-left">2016-01-11 00:00:00</td>
<td class="org-left">WLTW</td>
<td class="org-right">117.01</td>
<td class="org-right">114.97</td>
<td class="org-right">114.09</td>
<td class="org-right">117.33</td>
<td class="org-right">1.4086e+06</td>
</tr>
</tbody>
</table>

<p>
The notebook describes this as an example of a "strong" date case because the dates act as an explicit index for the data and are, in this case, an aggregate for a day of trading.
</p>
</div>

<div id="outline-container-orga59953d" class="outline-4">
<h4 id="orga59953d">UPS</h4>
<div class="outline-text-4" id="text-orga59953d">
<p>
Some of the correlational plots don't show anything meaningful when you use the market as a whole (I guess because different stocks are moving in different directions) so I'm going to pull out the UPS stock information to use later.
</p>

<div class="highlight"><pre><span></span>ups = nyse[nyse.symbol==&quot;UPS&quot;]
print(ups.shape)
</pre></div>

<pre class="example">
(1762, 6)

</pre>
</div>
</div>
</div>

<div id="outline-container-org4f2f1f1" class="outline-3">
<h3 id="org4f2f1f1">Shelter Outcomes</h3>
<div class="outline-text-3" id="text-org4f2f1f1">
<div class="highlight"><pre><span></span>shelter_path = kaggle_path.joinpath(
    &quot;austin-animal-center-shelter-outcomes/aac_shelter_outcomes.csv&quot;)
assert shelter_path.is_file()
shelter = pandas.read_csv(shelter_path, parse_dates=[&quot;datetime&quot;, &quot;date_of_birth&quot;])
</pre></div>

<div class="highlight"><pre><span></span>shelter.info()
</pre></div>

<pre class="example">
&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 78256 entries, 0 to 78255
Data columns (total 12 columns):
age_upon_outcome    78248 non-null object
animal_id           78256 non-null object
animal_type         78256 non-null object
breed               78256 non-null object
color               78256 non-null object
date_of_birth       78256 non-null datetime64[ns]
datetime            78256 non-null datetime64[ns]
monthyear           78256 non-null object
name                54370 non-null object
outcome_subtype     35963 non-null object
outcome_type        78244 non-null object
sex_upon_outcome    78254 non-null object
dtypes: datetime64[ns](2), object(10)
memory usage: 7.2+ MB
</pre>

<p>
Some of the columns are only identifiers (like a name) so we'll drop them to make it easier to inspect the data (although we aren't really going to do anything with it here anyway).
</p>

<div class="highlight"><pre><span></span>shelter = shelter[[&quot;outcome_type&quot;, &quot;age_upon_outcome&quot;, &quot;datetime&quot;,
		   &quot;animal_type&quot;, &quot;breed&quot;, &quot;color&quot;, &quot;sex_upon_outcome&quot;,
		   &quot;date_of_birth&quot;]]
print(table(shelter.head()))
</pre></div>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-right" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-right">&#xa0;</th>
<th scope="col" class="org-left">outcome_type</th>
<th scope="col" class="org-left">age_upon_outcome</th>
<th scope="col" class="org-left">datetime</th>
<th scope="col" class="org-left">animal_type</th>
<th scope="col" class="org-left">breed</th>
<th scope="col" class="org-left">color</th>
<th scope="col" class="org-left">sex_upon_outcome</th>
<th scope="col" class="org-left">date_of_birth</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-right">0</td>
<td class="org-left">Transfer</td>
<td class="org-left">2 weeks</td>
<td class="org-left">2014-07-22 16:04:00</td>
<td class="org-left">Cat</td>
<td class="org-left">Domestic Shorthair Mix</td>
<td class="org-left">Orange Tabby</td>
<td class="org-left">Intact Male</td>
<td class="org-left">2014-07-07 00:00:00</td>
</tr>

<tr>
<td class="org-right">1</td>
<td class="org-left">Transfer</td>
<td class="org-left">1 year</td>
<td class="org-left">2013-11-07 11:47:00</td>
<td class="org-left">Dog</td>
<td class="org-left">Beagle Mix</td>
<td class="org-left">White/Brown</td>
<td class="org-left">Spayed Female</td>
<td class="org-left">2012-11-06 00:00:00</td>
</tr>

<tr>
<td class="org-right">2</td>
<td class="org-left">Adoption</td>
<td class="org-left">1 year</td>
<td class="org-left">2014-06-03 14:20:00</td>
<td class="org-left">Dog</td>
<td class="org-left">Pit Bull</td>
<td class="org-left">Blue/White</td>
<td class="org-left">Neutered Male</td>
<td class="org-left">2013-03-31 00:00:00</td>
</tr>

<tr>
<td class="org-right">3</td>
<td class="org-left">Transfer</td>
<td class="org-left">9 years</td>
<td class="org-left">2014-06-15 15:50:00</td>
<td class="org-left">Dog</td>
<td class="org-left">Miniature Schnauzer Mix</td>
<td class="org-left">White</td>
<td class="org-left">Neutered Male</td>
<td class="org-left">2005-06-02 00:00:00</td>
</tr>

<tr>
<td class="org-right">4</td>
<td class="org-left">Euthanasia</td>
<td class="org-left">5 months</td>
<td class="org-left">2014-07-07 14:04:00</td>
<td class="org-left">Other</td>
<td class="org-left">Bat Mix</td>
<td class="org-left">Brown</td>
<td class="org-left">Unknown</td>
<td class="org-left">2014-01-07 00:00:00</td>
</tr>
</tbody>
</table>

<p>
The notebook describes this as an example of a "weak" date case because the dates are only there for record-keeping and, while they might be significant for modeling, aren't acting as an index for the records.
</p>
</div>
</div>
<div id="outline-container-org4f63327" class="outline-3">
<h3 id="org4f63327">Cryptocurrency</h3>
<div class="outline-text-3" id="text-org4f63327">
<div class="highlight"><pre><span></span>currency_path = kaggle_path.joinpath(&quot;all-crypto-currencies/crypto-markets.csv&quot;)
assert currency_path.is_file()
currency = pandas.read_csv(currency_path, parse_dates=[&quot;date&quot;])
currency = currency.set_index(&quot;date&quot;)
</pre></div>
</div>
</div>
</div>
<div id="outline-container-orga25794d" class="outline-2">
<h2 id="orga25794d">Grouping</h2>
<div class="outline-text-2" id="text-orga25794d">
</div>
<div id="outline-container-org8b6e14c" class="outline-3">
<h3 id="org8b6e14c">Birth Dates</h3>
<div class="outline-text-3" id="text-org8b6e14c">
<p>
Here's a plot of the birth dates of the animals in the shelter.
</p>

<div class="highlight"><pre><span></span>figure, axe = pyplot.subplots()
figure.suptitle(&quot;Count of Births By Date&quot;)
axe.set_xlabel(&quot;Date of Birth&quot;)
births = shelter.date_of_birth.value_counts().sort_values().plot.line(ax=axe)
</pre></div>


<div class="figure">
<p><img src="../files/posts/kaggle-on-time-series-visualization/births.png" alt="births.png" />
</p>
</div>


<div class="figure">
<p><img src="births.png" alt="births.png" />
</p>
</div>

<p>
It lools like there was an upward trend until about 2016 when it started to taper off, but since we're counting by days there's a lot of variance so we're going to group the data using pandas' <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.resample.html">resample</a> method. 
</p>

<p>
There's a couple of different ways to do this, but the simplest way is to take the count for each date using <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.value_counts.html">value_counts</a>. This will leave us with a <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.html">Series</a> with the dates in the index and the counts as values. Once we have this we can aggregate the dates by year and then count how many births there were per year.
</p>


<div class="highlight"><pre><span></span>counts = shelter.date_of_birth.value_counts()
print(counts.head())
</pre></div>

<p>
2014-05-05    112
2015-09-01    110
2014-04-21    105
2015-04-28    104
2016-05-01    102
</p>

<div class="highlight"><pre><span></span>year_counts = counts.resample(&quot;Y&quot;)
print(year_counts)
</pre></div>

<pre class="example">
DatetimeIndexResampler [freq=&lt;YearEnd: month=12&gt;, axis=0, closed=right, label=right, convention=start, base=0]

</pre>

<p>
Note that this is an aggregator, we don't get what we want until we call a method (like <code>count</code>) on it. In this case since we have value counts we want to sum all of the counts for a year (so we need <code>sum</code>).
</p>

<div class="highlight"><pre><span></span>figure, axe = pyplot.subplots()
sums = year_counts.sum()
first = counts.index.min()
last = counts.index.max()
figure.suptitle(&quot;Births Per Year ({} - {})&quot;.format(first.year,
						   last.year),
		weight=&quot;bold&quot;)
axe.set_xlim((first, last))
peak = sums.idxmax()
axe.axvline(peak, color=&quot;r&quot;, linestyle=&quot;:&quot;, label=peak.year)

plotted = sums.plot.line(ax=axe, label=&quot;_&quot;)
axe.legend()
lim = axe.set_ylim(bottom=0)
</pre></div>


<div class="figure">
<p><img src="../files/posts/kaggle-on-time-series-visualization/births_by_year.png" alt="births_by_year.png" />
</p>
</div>


<div class="figure">
<p><img src="births_by_year.png" alt="births_by_year.png" />
</p>
</div>

<p>
An alternative way to look at this would be a lollipop plot.
</p>

<div class="highlight"><pre><span></span>figure, axe = pyplot.subplots()
figure.suptitle(&quot;Births Per Year ({} - {})&quot;.format(first.year,
						   last.year),
		weight=&quot;bold&quot;)

x_labels = pandas.Series([x.year for x in sums.index])
peak_index = int(x_labels[x_labels==peak.year])
axe.axvline(peak_index, color=&quot;r&quot;, linestyle=&quot;:&quot;, label=&quot;{} (Peak Year)&quot;.format(peak.year))
stems = axe.stem(x_labels, sums)
axe.set_xlim(left=first.year)
figure.autofmt_xdate()
legend = axe.legend()
</pre></div>


<div class="figure">
<p><img src="../files/posts/kaggle-on-time-series-visualization/births_lollipop.png" alt="births_lollipop.png" />
</p>
</div>


<div class="figure">
<p><img src="births_lollipop.png" alt="births_lollipop.png" />
</p>
</div>

<p>
There's something funny going on with the dates, passing in the index instead of a list of years shifts all the years to the left by one (what's 2015 on the plot above would be 2016). I don't know what's doing this.
</p>
</div>
</div>

<div id="outline-container-org5028aff" class="outline-3">
<h3 id="org5028aff">Outcomes</h3>
<div class="outline-text-3" id="text-org5028aff">
<p>
While knowing the birthdates of the animals in the shelter is interesting, what about the dates when their cases were resolved?
</p>

<div class="highlight"><pre><span></span>outcome_counts = shelter.datetime.value_counts()
outcomes = outcome_counts.resample(&quot;Y&quot;).sum()
print(outcome_counts.head())
</pre></div>

<pre class="example">
2016-04-18    39
2015-08-11    25
2017-10-17    25
2015-11-17    22
2015-07-02    22
Name: datetime, dtype: int64

</pre>


<div class="highlight"><pre><span></span>figure, axe = pyplot.subplots()
x_labels = pandas.Series([x.year for x in sums.index])
figure.suptitle(&quot;Outcomes Per Year&quot;, weight=&quot;bold&quot;)
stems = axe.stem(outcomes.index, outcomes, label=&quot;Outcome&quot;)
axe.plot(sums.index, sums, &quot;r.&quot;, label=&quot;Births&quot;)
# axe.set_xticklabels(x_labels)
figure.autofmt_xdate()
legend = axe.legend()
</pre></div>


<div class="figure">
<p><img src="../files/posts/kaggle-on-time-series-visualization/outcomes.png" alt="outcomes.png" />
</p>
</div>


<div class="figure">
<p><img src="outcomes.png" alt="outcomes.png" />
</p>
</div>

<p>
So, we've re-introduced the messed up dates on the x-axis (I kind of tried to fix it but gave up), but, ignoring the actual years you can see that there are only six years of adoption outcomes although there are sixteen years of birth dates.
</p>
</div>
</div>

<div id="outline-container-orga8065fe" class="outline-3">
<h3 id="orga8065fe">Trading Volume</h3>
<div class="outline-text-3" id="text-orga8065fe">
<p>
The previous plot was a count-plot. You can also use other summary-statistics like a mean to see how things changed over time.
</p>

<div class="highlight"><pre><span></span>figure, axe = pyplot.subplots()
volume = nyse.volume.resample(&quot;Y&quot;)
means = volume.mean()
figure.suptitle(&quot;Mean NYSE Trading Volume Per Year&quot;, weight=&quot;bold&quot;)
stem = axe.stem(means.index, means)
</pre></div>


<div class="figure">
<p><img src="../files/posts/kaggle-on-time-series-visualization/volume.png" alt="volume.png" />
</p>
</div>


<div class="figure">
<p><img src="volume.png" alt="volume.png" />
</p>
</div>

<p>
I tried putting standard deviations in there too but the values are so big it squashed the means.
</p>
</div>
</div>
</div>

<div id="outline-container-org45b3c3d" class="outline-2">
<h2 id="org45b3c3d">Lag Plots</h2>
<div class="outline-text-2" id="text-org45b3c3d">
<p>
The <a href="https://pandas.pydata.org/pandas-docs/stable/visualization.html#lag-plot">Lag Plot</a> helps you check if there is a significance to the ordering of the data. You are plotting the value in the inputs vs the next value (e.g. one day against the following day). If there is no significance to the ordering then the plot will look random.
</p>

<div class="highlight"><pre><span></span>volume = nyse.volume.resample(&quot;D&quot;)
</pre></div>

<div class="highlight"><pre><span></span>figure, axe = pyplot.subplots()
figure.suptitle(&quot;NYSE Volume Lag Plot&quot;, weight=&quot;bold&quot;)
subplot = lag_plot(volume.sum().tail(365), ax=axe)
</pre></div>


<div class="figure">
<p><img src="../files/posts/kaggle-on-time-series-visualization/lag_plot.png" alt="lag_plot.png" />
</p>
</div>


<div class="figure">
<p><img src="lag_plot.png" alt="lag_plot.png" />
</p>
</div>

<p>
So, the center points do seem to show a relationship, as the next-days volume goes up along with the previous day's volume, but I don't know what those bands around 0 are. One thing I noticed is that there are holidays in the data.
</p>

<div class="highlight"><pre><span></span>print(volume.sum().index[-6])
</pre></div>

<pre class="example">
2016-12-25 00:00:00

</pre>

<p>
And there are also weekends in there.
</p>

<div class="highlight"><pre><span></span>print(volume.sum().index[-13].strftime(&quot;%a&quot;))
</pre></div>

<pre class="example">
Sun

</pre>

<p>
So it's likely that there are days in there where there was no trading and so they won't correlate with the days that preceded the start of a break or the ones that followed the end of a break. I think. I don't really know if there's trading all year round.
</p>

<div class="highlight"><pre><span></span>volume_sums = volume.sum()
for day in volume_sums[volume_sums==0][-9:].index:
    print(&quot;{} {}&quot;.format(day.strftime(&quot;%a&quot;), day))
</pre></div>

<pre class="example">
Sat 2016-12-03 00:00:00
Sun 2016-12-04 00:00:00
Sat 2016-12-10 00:00:00
Sun 2016-12-11 00:00:00
Sat 2016-12-17 00:00:00
Sun 2016-12-18 00:00:00
Sat 2016-12-24 00:00:00
Sun 2016-12-25 00:00:00
Mon 2016-12-26 00:00:00

</pre>

<p>
So it does look like the zeros are weekends and holidays.
</p>
</div>

<div id="outline-container-org9b4e91a" class="outline-3">
<h3 id="org9b4e91a">UPS</h3>
<div class="outline-text-3" id="text-org9b4e91a">
<p>
Here's what just the UPS trading volumes look like.
</p>
<div class="highlight"><pre><span></span>figure, axe = pyplot.subplots()
figure.suptitle(&quot;UPS Trading Volume Lag Plot&quot;, weight=&quot;bold&quot;)
subplot = lag_plot(ups.volume, ax=axe)
</pre></div>


<div class="figure">
<p><img src="../files/posts/kaggle-on-time-series-visualization/ups_lag_plot.png" alt="ups_lag_plot.png" />
</p>
</div>


<div class="figure">
<p><img src="ups_lag_plot.png" alt="ups_lag_plot.png" />
</p>
</div>

<p>
I don't know why but that makes it look better. I guess the market as a whole doesn't move quite so well together day by day as a single stock does.
</p>
</div>
</div>
</div>
<div id="outline-container-org66b225f" class="outline-2">
<h2 id="org66b225f">Autcorrelation Plot</h2>
<div class="outline-text-2" id="text-org66b225f">
<div class="highlight"><pre><span></span>figure, axe = pyplot.subplots()
figure.suptitle(&quot;UPS Trading Volume Daily Autocorrelation&quot;, weight=&quot;bold&quot;)
subplot = autocorrelation_plot(ups.volume, ax=axe)
</pre></div>


<div class="figure">
<p><img src="../files/posts/kaggle-on-time-series-visualization/autocorrelation.png" alt="autocorrelation.png" />
</p>
</div>


<div class="figure">
<p><img src="autocorrelation.png" alt="autocorrelation.png" />
</p>
</div>

<p>
This plot shows the lag in relationship to correlation over different lag intervals. It looks like up to about 500 days of lag the correlation is positive but it starts to become more negative after that.  The horizontal lines are the confidence intervals - the solid grey lines are the 95 % interval and the dashed grey lines are the 99% interval. The points that fall outside of these intervals are statistically significant.
</p>
</div>
</div>
<div id="outline-container-orgd202a2a" class="outline-2">
<h2 id="orgd202a2a">Cryptocurrency</h2>
<div class="outline-text-2" id="text-orgd202a2a">
</div>
<div id="outline-container-orge5355bd" class="outline-3">
<h3 id="orge5355bd">Lag Plot</h3>
<div class="outline-text-3" id="text-orge5355bd">
<div class="highlight"><pre><span></span>crypto_daily = currency.volume.resample(&quot;D&quot;)
figure, axe = pyplot.subplots()
figure.suptitle(&quot;Cryptocurrency Volume Lag Plot&quot;, weight=&quot;bold&quot;)
subplot = lag_plot(crypto_daily.sum(), ax=axe)
</pre></div>


<div class="figure">
<p><img src="../files/posts/kaggle-on-time-series-visualization/crypto_lag.png" alt="crypto_lag.png" />
</p>
</div>


<div class="figure">
<p><img src="crypto_lag.png" alt="crypto_lag.png" />
</p>
</div>

<p>
Unlike the stock-exchange, the cryptocurrencies seem to move together.
</p>
</div>
</div>

<div id="outline-container-org3598dd6" class="outline-3">
<h3 id="org3598dd6">Autocorrelation Plot</h3>
<div class="outline-text-3" id="text-org3598dd6">
<div class="highlight"><pre><span></span>figure, axe = pyplot.subplots()
figure.suptitle(&quot;Cryptocurrency Auto Correlation&quot;, weight=&quot;bold&quot;)
dogecoin = currency[currency.name==&quot;Dogecoin&quot;]
subplot = autocorrelation_plot(dogecoin.volume, ax=axe)
</pre></div>


<div class="figure">
<p><img src="../files/posts/kaggle-on-time-series-visualization/currency_autocorrelation.png" alt="currency_autocorrelation.png" />
</p>
</div>


<div class="figure">
<p><img src="currency_autocorrelation.png" alt="currency_autocorrelation.png" />
</p>
</div>

<p>
If my understanding of how this plot works is correct, there is some kind of significance to lags of 125 and 250 days. Is this really true? I don't know.
</p>
</div>
</div>
</div>
