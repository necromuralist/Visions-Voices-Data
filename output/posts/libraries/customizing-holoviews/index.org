#+BEGIN_COMMENT
.. title: Customizing HoloViews
.. slug: customizing-holoviews
.. date: 2019-02-02 17:07:31 UTC-08:00
.. tags: holoviews,exploration
.. category: HoloViews
.. link: 
.. description: Looking at HoloViews "Customization".
.. type: text

#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 2
#+BEGIN_SRC ipython :session holoviews :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC
* Introduction
  This is another exploration, this time looking at what they call [[http://holoviews.org/getting_started/Customization.html][Customization]]. In my introduction post when I made a scatter plot with a hover tool I first had to make the Scatter element and then add the hover tool as part of the options. HoloViews does this to try and emphasize a separation of content and presentation. When making the Scatter element I was supposed to only be thinking about the data that I wanted to add, then when working with the options I was turning to focus on the aesthetics.
* Set Up
** Imports
*** Python
#+BEGIN_SRC ipython :session holoviews :results none
from datetime import datetime
from functools import partial
from pathlib import Path
import os
#+END_SRC
*** PyPi
#+BEGIN_SRC ipython :session holoviews :results none :exports none
from dotenv import load_dotenv
from holoviews import opts
import holoviews
import pandas
#+END_SRC
*** Related Projects
#+BEGIN_SRC ipython :session holoviews :results none
from neurotic.tangles.timer import Timer
#+END_SRC
*** This Project
#+BEGIN_SRC ipython :session holoviews :results none
from bartleby_the_penguin.tangles.embed_bokeh import EmbedBokeh
#+END_SRC
** The Timer
#+BEGIN_SRC ipython :session holoviews :results none
TIMER = Timer()
#+END_SRC
** The Embedder
#+BEGIN_SRC ipython :session holoviews :results none
files_path = Path("../../files/posts/libraries/customizing-holoviews/")
Embed = partial(
    EmbedBokeh,
    folder_path=files_path)
#+END_SRC
** Bokeh Backend

When I ran the code further down in the notebook to render the javascript I was getting this error:

#+BEGIN_EXAMPLE
ValueError: autoload_static expects a single Model or Document
#+END_EXAMPLE

It was because I forgot the next step and it was defaulting to Matplotlib for some reason.

#+BEGIN_SRC ipython :session holoviews :results none
holoviews.extension("bokeh")
#+END_SRC
* The Data
#+BEGIN_SRC ipython :session holoviews :results none
load_dotenv()
#+END_SRC

#+BEGIN_SRC ipython :session holoviews :results output :exports both
path = Path(os.environ.get("PORTLAND_CRIME")).expanduser()
assert path.exists()
with TIMER:
    data = pandas.read_csv(path)
#+END_SRC

#+RESULTS:
: Started: 2019-02-02 18:46:58.097693
: Ended: 2019-02-02 18:46:58.937793
: Elapsed: 0:00:00.840100

#+BEGIN_SRC ipython :session holoviews :results output :exports both
print(data.info())
#+END_SRC

#+RESULTS:
#+begin_example
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 217224 entries, 0 to 217223
Data columns (total 17 columns):
Address              196626 non-null object
Case Number          217224 non-null object
Crime Against        217224 non-null object
Neighborhood         210788 non-null object
Number of Records    217224 non-null int64
Occur Month Year     217224 non-null object
Occur Date           217224 non-null object
Occur Time           217224 non-null int64
Offense Category     217224 non-null object
Offense Count        217224 non-null int64
Offense Type         217224 non-null object
OpenDataLat          193352 non-null float64
OpenDataLon          193352 non-null float64
OpenDataX            193352 non-null float64
OpenDataY            193352 non-null float64
Report Date          217224 non-null object
ReportMonthYear      217224 non-null object
dtypes: float64(4), int64(3), object(10)
memory usage: 28.2+ MB
None
#+end_example

#+BEGIN_SRC ipython :session holoviews :results output :exports both
date = (data["Occur Date"]
        + " "
        + data["Occur Time"].astype(str).str.zfill(4))
data["date"] = pandas.to_datetime(date, format="%m/%d/%Y %H%M")

print(data.date[:5])
#+END_SRC

#+RESULTS:
: 0   2017-08-26 00:00:00
: 1   2017-08-29 16:00:00
: 2   2017-08-12 19:00:00
: 3   2017-08-27 01:00:00
: 4   2017-07-24 09:03:00
: Name: date, dtype: datetime64[ns]


#+BEGIN_SRC ipython :session holoviews :results none
data = data[(data.date >= datetime(2015, 5, 31))
            & (data.date < datetime(2019, 1, 1))]
#+END_SRC

#+BEGIN_SRC ipython :session holoviews :results none
selection = data[data.date > datetime(2018, 12, 24)].sort_values("date")
#+END_SRC
** Plot time vs Latitude.
   First we get our content.

#+BEGIN_SRC ipython :session holoviews :results none
curve = holoviews.Curve(selection, ("date", "Date-Time"), ("OpenDataLat", "Latitude"))
timestamps = holoviews.Spikes(selection, ("date", "Date-Time"), [])
layout = curve + timestamps
#+END_SRC

Now we make our presentation.

#+BEGIN_SRC ipython :session holoviews :results output raw :exports results
Embed(layout, "latitude_time_1")()
#+END_SRC

#+RESULTS:
#+BEGIN_EXPORT html
<script src="latitude_time_1.js" id="80ce2562-7cca-4f31-a74a-98942d77a03b"></script>
#+END_EXPORT

** Take Two
   Although the defaults give us a plot that's hard to read, by adjusting the width of the plot we can make it something more interpretable.
#+BEGIN_SRC ipython :session holoviews :results none
layout = layout.opts(
    opts.Curve(height=200, width=900, xaxis=None, color="red", line_width=1.5, tools=["hover"]),
    opts.Spikes(height=150, width=900, xaxis=None, color="grey")
).cols(1)
#+END_SRC

#+BEGIN_SRC ipython :session holoviews :results output raw :exports results
Embed(layout, "latitude_time_2")()
#+END_SRC

#+RESULTS:
#+BEGIN_EXPORT html
<script src="latitude_time_2.js" id="9453cc0e-bdec-4716-874a-a8d149b9e6dd"></script>
#+END_EXPORT
