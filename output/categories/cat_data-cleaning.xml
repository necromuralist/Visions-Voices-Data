<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visions, Voices, Data (Posts about Data Cleaning)</title><link>https://necromuralist.github.io/Visions-Voices-Data/</link><description></description><atom:link href="https://necromuralist.github.io/Visions-Voices-Data/categories/cat_data-cleaning.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Tue, 22 Jan 2019 06:07:40 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Portland Daily Temperatures Data</title><link>https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/#orgdf913d6"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/#org8b902eb"&gt;Set Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/#orgeb1a321"&gt;Loading the Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/#org75c5178"&gt;Cleaning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/#org9d15463"&gt;Figuring Out the Missing Date&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/#org0e5dc98"&gt;Pivot the Metric Column&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/#org83b5ff0"&gt;Updating the Columns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/#org26e3caa"&gt;Save the Message Pack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/#orgadc76ed"&gt;Looking at Some Plots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgdf913d6" class="outline-2"&gt;
&lt;h2 id="orgdf913d6"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdf913d6"&gt;
&lt;p&gt;
I'm going to work with the Daily Temperatures data set for Portland, Oregon (measured at the airport) taken from the &lt;a href="https://w2.weather.gov/climate/local_data.php?wfo=pqr"&gt;National Weather Service&lt;/a&gt;. I cleaned it up a little already, removing the extra header rows and adding a missing column header (&lt;code&gt;Metric&lt;/code&gt;) but the data is arranged with the year and month as a column and then each day is given its own column, which isn't how I want to work with it, so I'm going to transform it a little to make it more like what I expect it to look like.}
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8b902eb" class="outline-2"&gt;
&lt;h2 id="org8b902eb"&gt;Set Up&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org8b902eb"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1611f01" class="outline-3"&gt;
&lt;h3 id="org1611f01"&gt;Imports&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1611f01"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9ed0524" class="outline-4"&gt;
&lt;h4 id="org9ed0524"&gt;Python&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org9ed0524"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from datetime import datetime
from pathlib import Path
from typing import Union
import os
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb48a25d" class="outline-4"&gt;
&lt;h4 id="orgb48a25d"&gt;From PyPi&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgb48a25d"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from dotenv import load_dotenv
import matplotlib.pyplot as pyplot
import pandas
import seaborn
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org169096e" class="outline-3"&gt;
&lt;h3 id="org169096e"&gt;Plotting&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org169096e"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;get_ipython().run_line_magic('matplotlib', 'inline')
get_ipython().run_line_magic('config', "InlineBackend.figure_format = 'retina'")
seaborn.set(style="whitegrid",
	    rc={"axes.grid": False,
		"font.family": ["sans-serif"],
		"font.sans-serif": ["Open Sans", "Latin Modern Sans", "Lato"],
		"figure.figsize": (8, 6)},
	    font_scale=1)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeb1a321" class="outline-2"&gt;
&lt;h2 id="orgeb1a321"&gt;Loading the Data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgeb1a321"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;load_dotenv()
path = Path(os.environ.get("CSV")).expanduser()
print(path)
assert path.is_file()
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
/home/hades/data/datasets/necromuralist/daily-climate-data/portland_1940_to_april_2018.csv

&lt;/pre&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3c57d46" class="outline-3"&gt;
&lt;h3 id="org3c57d46"&gt;Some Preparation&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3c57d46"&gt;
&lt;p&gt;
The first thing to work with is that there are three characters representing "missing" data (that I noticed) - &lt;i&gt;M&lt;/i&gt;, &lt;i&gt;T&lt;/i&gt;, and &lt;i&gt;-&lt;/i&gt; - that we have to tell pandas about when we use &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html"&gt;read_csv&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;missing = ["M", "T", "-"]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I was going to load the measurement type (e.g. "TX"), but I realized that I was planning to turn those into column headers so maybe it's not a good idea.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data = pandas.read_csv(path, na_values=missing)
print(data.shape)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
(3756, 35)

&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(data.columns)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Index(['YR', 'MO', 'Metric', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10',
       '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22',
       '23', '24', '25', '26', '27', '28', '29', '30', '31', 'AVG or Total'],
      dtype='object')

&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(data.info())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;lt;class 'pandas.core.frame.DataFrame'&amp;gt;
RangeIndex: 3756 entries, 0 to 3755
Data columns (total 35 columns):
YR              3756 non-null int64
MO              3756 non-null int64
Metric          3756 non-null object
1               3602 non-null float64
2               3554 non-null float64
3               3583 non-null float64
4               3604 non-null float64
5               3599 non-null float64
6               3610 non-null float64
7               3587 non-null object
8               3590 non-null float64
9               3595 non-null float64
10              3614 non-null float64
11              3602 non-null float64
12              3600 non-null float64
13              3583 non-null float64
14              3582 non-null float64
15              3591 non-null float64
16              3604 non-null float64
17              3598 non-null float64
18              3615 non-null float64
19              3611 non-null float64
20              3588 non-null float64
21              3606 non-null float64
22              3609 non-null float64
23              3595 non-null float64
24              3605 non-null float64
25              3598 non-null float64
26              3600 non-null float64
27              3598 non-null float64
28              3593 non-null float64
29              3371 non-null float64
30              3294 non-null float64
31              2097 non-null float64
AVG or Total    3616 non-null float64
dtypes: float64(31), int64(2), object(2)
memory usage: 1.0+ MB
None
&lt;/pre&gt;

&lt;p&gt;
For some reason column &lt;code&gt;7&lt;/code&gt; wasn't converted to a float.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for index, row in enumerate(data["7"]):
    try:
	float(row)
    except Exception as error:
	print(error)
	print("Row: {}".format(index))
	print("Value: {}".format(row))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
could not convert string to float: 
Row: 1835
Value:  

&lt;/pre&gt;
&lt;p&gt;
It turns out that this one row also had a space (' ') for one of the values. Strange.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;missing.append(" ")
data = pandas.read_csv(path, na_values=missing)
print(data.info())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;lt;class 'pandas.core.frame.DataFrame'&amp;gt;
RangeIndex: 3756 entries, 0 to 3755
Data columns (total 35 columns):
YR              3756 non-null int64
MO              3756 non-null int64
Metric          3756 non-null object
1               3602 non-null float64
2               3554 non-null float64
3               3583 non-null float64
4               3604 non-null float64
5               3599 non-null float64
6               3610 non-null float64
7               3586 non-null float64
8               3590 non-null float64
9               3595 non-null float64
10              3614 non-null float64
11              3602 non-null float64
12              3600 non-null float64
13              3583 non-null float64
14              3582 non-null float64
15              3591 non-null float64
16              3604 non-null float64
17              3598 non-null float64
18              3615 non-null float64
19              3611 non-null float64
20              3588 non-null float64
21              3606 non-null float64
22              3609 non-null float64
23              3595 non-null float64
24              3605 non-null float64
25              3598 non-null float64
26              3600 non-null float64
27              3598 non-null float64
28              3593 non-null float64
29              3371 non-null float64
30              3294 non-null float64
31              2097 non-null float64
AVG or Total    3616 non-null float64
dtypes: float64(32), int64(2), object(1)
memory usage: 1.0+ MB
None
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org75c5178" class="outline-2"&gt;
&lt;h2 id="org75c5178"&gt;Cleaning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org75c5178"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1ce6ef9" class="outline-3"&gt;
&lt;h3 id="org1ce6ef9"&gt;Drop the Last Column&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1ce6ef9"&gt;
&lt;p&gt;
Besides the fact that the last column is a calculated one, the fact that it's ambiguous (I guess you can tell by how big it is whether it's a Total, but still) makes me think I should get rid of the last column (using &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html"&gt;drop&lt;/a&gt;).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cleaned = data.drop(data.columns[-1], axis="columns")
print(cleaned.shape)
assert len(cleaned.columns) == len(data.columns) - 1
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
(3756, 34)

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3f2cffd" class="outline-3"&gt;
&lt;h3 id="org3f2cffd"&gt;Rotate the Days&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3f2cffd"&gt;
&lt;p&gt;
Now I'm going to move the day-columns into row-values using &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.melt.html"&gt;melt&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;melted = pandas.melt(cleaned, id_vars=["YR", "MO", "Metric"], var_name="Day", value_name="Value")
print(melted.head())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
     YR  MO Metric Day  Value
0  1940  10     TX   1    NaN
1  1940  10     TN   1    NaN
2  1940  10     PR   1    NaN
3  1940  10     SN   1    NaN
4  1940  11     TX   1   52.0

&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(melted.shape)
assert len(melted) == len(data) * 31
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
(116436, 5)

&lt;/pre&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgec97105" class="outline-4"&gt;
&lt;h4 id="orgec97105"&gt;Casting the Days to Integers&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgec97105"&gt;
&lt;p&gt;
Although they look like integers, the &lt;code&gt;Day&lt;/code&gt; column was converted from column headers so they're strings. Maybe I could have cast them at the time of the conversion, but, oh, well.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(type(melted.iloc[0].Day))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;lt;class 'str'&amp;gt;

&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;melted["Day"] = melted.Day.astype(int)
print(type(melted.iloc[0].Day))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;lt;class 'numpy.int64'&amp;gt;

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8b69fc1" class="outline-3"&gt;
&lt;h3 id="org8b69fc1"&gt;Make a Date Column&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8b69fc1"&gt;
&lt;p&gt;
Now I'll make a single date column.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;melted["date"] = melted.apply(lambda row: datetime(year=row.YR,
						   month=row.MO,
						   day=row.Day),
			      axis="columns")
print(melted.head())
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
That raised an error..
&lt;/p&gt;

&lt;pre class="example"&gt;
ValueError: ('day is out of range for month', 'occurred at index 105184')
&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(melted.iloc[105184])
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
YR        1941
MO           2
Metric      TX
Day         29
Value        -
Name: 105184, dtype: object

&lt;/pre&gt;

&lt;p&gt;
Okay, so here we have a problem in that not all the dates exist. Also, for some reason the '-' didn't get converted to a NaN, but one thing at a time.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def to_datetime(row: pandas.Series) -&amp;gt; Union[datetime, None]:
    """Converts the row to a datetime

    Args:
     row: row in the dataframe with year, month, and day
    Returns:
     row converted to datetime or None if it isn't valid
    """
    if not pandas.isnull(row.Value):
	try:
	    return datetime(year=row.YR, month=row.MO, day=row.Day)
	except ValueError as error:
	    print(error)
    return    
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;started = datetime.now()
melted["date"] = melted.apply(to_datetime, axis="columns")
print(melted.head())
print("Elapsed: {}".format(datetime.now() - started))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
day is out of range for month
     YR  MO Metric  Day  Value       date
0  1940  10     TX    1    NaN        NaT
1  1940  10     TN    1    NaN        NaT
2  1940  10     PR    1    NaN        NaT
3  1940  10     SN    1    NaN        NaT
4  1940  11     TX    1   52.0 1940-11-01
Elapsed: 0:00:09.351053

&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print("Fraction Missing: {:.2f}".format(
    len(melted[melted.Value.isnull()])/len(melted)))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Fraction Missing: 0.06

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org26ed541" class="outline-3"&gt;
&lt;h3 id="org26ed541"&gt;Drop the Missing&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org26ed541"&gt;
&lt;p&gt;
Here I'll drop the dates that didn't have data.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cleaned = melted.dropna(subset=["Value"])
print(cleaned.head())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
     YR  MO Metric  Day  Value       date
4  1940  11     TX    1  52.00 1940-11-01
5  1940  11     TN    1  40.00 1940-11-01
6  1940  11     PR    1   0.17 1940-11-01
7  1940  11     SN    1   0.00 1940-11-01
8  1940  12     TX    1  51.00 1940-12-01

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc3f898f" class="outline-3"&gt;
&lt;h3 id="orgc3f898f"&gt;Drop the Extra Date Coulmns&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc3f898f"&gt;
&lt;p&gt;
Since we have a date column I'll get rid of the columns that made it up.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cleaned = cleaned.drop(["YR", "MO", "Day"], axis="columns")
print(cleaned.head())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
  Metric  Value       date
4     TX  52.00 1940-11-01
5     TN  40.00 1940-11-01
6     PR   0.17 1940-11-01
7     SN   0.00 1940-11-01
8     TX  51.00 1940-12-01

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9d15463" class="outline-2"&gt;
&lt;h2 id="org9d15463"&gt;Figuring Out the Missing Date&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org9d15463"&gt;
&lt;p&gt;
One of the entries has values but no date.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(cleaned[cleaned.date.isnull()])
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
       Metric  Value date
105427     SN   34.0  NaT

&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(melted.iloc[105427])
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
YR        1946
MO           2
Metric      SN
Day         29
Value       34
date       NaT
Name: 105427, dtype: object

&lt;/pre&gt;

&lt;p&gt;
I looked it up and 1946 isn't a leap-year, so there's no February 29, 1946. Did something get lost in translation?
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(data[(data.YR==1946) &amp;amp; (data.MO==2)])
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
       YR  MO Metric      1      2     3      4      5      6      7  \
256  1946   2     TX  48.00  47.00  45.0  43.00  48.00  48.00  43.00   
257  1946   2     TN  44.00  35.00  32.0  32.00  37.00  39.00  33.00   
258  1946   2     PR   0.05   0.02   NaN   0.01   1.54   0.63   0.06   
259  1946   2     SN   0.00   0.00   0.0   0.00   0.00   0.00   0.00   

         ...         23     24    25     26     27     28    29  30  31  \
256      ...       58.0  52.00  53.0  49.00  53.00  55.00   NaN NaN NaN   
257      ...       43.0  40.00  39.0  35.00  44.00  40.00   NaN NaN NaN   
258      ...        0.1   0.26   NaN   0.57   0.64   0.04   NaN NaN NaN   
259      ...        0.0   0.00   0.0   0.00   0.00   0.00  34.0 NaN NaN   

     AVG or Total  
256         49.40  
257         36.00  
258          4.99  
259          0.00  

[4 rows x 35 columns]
&lt;/pre&gt;

&lt;p&gt;
It looks like there's something wrong with the snowfall measurement for that date, the other measurements don't have values.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(data[(data.YR==1946) &amp;amp; (data.MO==2) &amp;amp; (data.Metric=="SN")])
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
       YR  MO Metric    1    2    3    4    5    6    7      ...        23  \
259  1946   2     SN  0.0  0.0  0.0  0.0  0.0  0.0  0.0      ...       0.0   

      24   25   26   27   28    29  30  31  AVG or Total  
259  0.0  0.0  0.0  0.0  0.0  34.0 NaN NaN           0.0  

[1 rows x 35 columns]

&lt;/pre&gt;

&lt;p&gt;
It was just all 0's and then there's this mysterious 34 inches of snow on the 29th of February. I'm pretty sure that's a mistake. I'll have to delete that. 
&lt;/p&gt;

&lt;p&gt;
Although I have the index in the original &lt;code&gt;data&lt;/code&gt; frame I've already done all this cleaning so I think it's easier just to drop the missing dates.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rows, columns = cleaned.shape
cleaned = cleaned.dropna(subset=["date"])
assert cleaned.shape[0] == rows - 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0e5dc98" class="outline-2"&gt;
&lt;h2 id="org0e5dc98"&gt;Pivot the Metric Column&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0e5dc98"&gt;
&lt;p&gt;
So, besides getting the dates into a column one of the points of this was to get the metric types into columns by &lt;a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.pivot.html"&gt;pivoting&lt;/a&gt;. I guess you could argue that this is just a category, but since each date gets all four of the values I think this makes sense.
&lt;/p&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pivoted = cleaned.pivot(index="date", columns="Metric", values="Value")
print(pivoted.head())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Metric        PR   SN    TN    TX
date                             
1940-10-13  0.01  0.0  57.0  75.0
1940-10-14   NaN  0.0  53.0  70.0
1940-10-15   NaN  0.0  52.0  64.0
1940-10-16  0.00  0.0  50.0  72.0
1940-10-17  0.13  0.0  58.0  72.0

&lt;/pre&gt;

&lt;p&gt;
It looks like there's some missing precipitation data. I don't really have a solution for that. I think decisions to imput missing values should come when the data set is being used.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for metric in ("PR", "SN", "TN", "TX"):
    print("{} Missing: {:,}".format(metric, len(pivoted[pivoted[metric].isnull()])))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
PR Missing: 3,297
SN Missing: 523
TN Missing: 0
TX Missing: 0

&lt;/pre&gt;

&lt;p&gt;
So it looks like we're okay with the temperatures but maybe not so well off with the precipitation.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;missing = pivoted[pivoted.PR.isnull()]
missing.loc[:, "missing"] = 1
monthly = missing.missing.resample("M")
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;figure, axe = pyplot.subplots()
figure.suptitle("Missing Monthly Precipitation", weight="bold")
counts = monthly.count()
stem = axe.stem(counts.index, counts)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
&lt;img src="https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/missing_pr.png" alt="missing_pr.png"&gt;
So, I was expecting this to be a problem that happened early and then died out, but it appears there's an ongoing problem with collecting precipitation - or maybe they use a symbol for 0 that I'm interpreting as missing?
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yearly = missing.missing.resample("Y")
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;figure, axe = pyplot.subplots()
figure.suptitle("Missing Yearly Precipitation", weight="bold")
counts = yearly.count()
stem = axe.stem(counts.index, counts)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/missing_yearly_pr.png" alt="missing_yearly_pr.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
This does seem problematic, if I do anything with precipitation I'll have to figure out what's going on here.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org83b5ff0" class="outline-2"&gt;
&lt;h2 id="org83b5ff0"&gt;Updating the Columns&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org83b5ff0"&gt;
&lt;p&gt;
The whole &lt;code&gt;TX&lt;/code&gt;, &lt;code&gt;TN&lt;/code&gt;, etc. encoding scheme seems like it causes too much mental overhead so I'm going to rename the metric columns.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;renamed = pivoted.rename(dict(PR="precipitation",
			      SN="snowfall",
			      TN="minimum_temperature",
			      TX="maximum_temperature"),
			 axis="columns")
print(renamed.head())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Metric      precipitation  snowfall  minimum_temperature  maximum_temperature
date                                                                         
1940-10-13           0.01       0.0                 57.0                 75.0
1940-10-14            NaN       0.0                 53.0                 70.0
1940-10-15            NaN       0.0                 52.0                 64.0
1940-10-16           0.00       0.0                 50.0                 72.0
1940-10-17           0.13       0.0                 58.0                 72.0

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org26e3caa" class="outline-2"&gt;
&lt;h2 id="org26e3caa"&gt;Save the Message Pack&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org26e3caa"&gt;
&lt;p&gt;
Now that we have the cleaned-up data, I'll save it as a message pack.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pack_path = Path(os.environ.get("MESSAGE_PACK")).expanduser()
print(pack_path)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
/home/hades/pCloudDrive/data/daily-climate-data/portland_1940_to_april_2018.msg

&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;renamed.to_msgpack(pack_path)
assert pack_path.is_file()
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgadc76ed" class="outline-2"&gt;
&lt;h2 id="orgadc76ed"&gt;Looking at Some Plots&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgadc76ed"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;maximum_temperature = renamed.maximum_temperature.resample("Y")
medians = maximum_temperature.median()
maxes = maximum_temperature.max()
mins = maximum_temperature.min()
figure, axe = pyplot.subplots()
figure.suptitle("Portland, OR Yearly Maximum Daily Temperatures", weight="bold")
axe.stem(maxes.index, maxes, markerfmt="ro",label="Maximum")
axe.stem(mins.index, mins, markerfmt="go", label="Minimum")
stem = axe.stem(medians.index, medians, label="Median")
legend = axe.legend(bbox_to_anchor=(1, 1))
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/median_yearly_temperature.png" alt="median_yearly_temperature.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cleaning</category><category>data</category><category>weather</category><guid>https://necromuralist.github.io/Visions-Voices-Data/posts/portland-daily-climate/portland-daily-temperatures-data/</guid><pubDate>Tue, 22 Jan 2019 01:31:32 GMT</pubDate></item></channel></rss>