#+BEGIN_COMMENT
.. title: Snorkel Example: Building a Spam Dataset
.. slug: snorkel-example-building-a-spam-dataset
.. date: 2020-01-06 17:40:40 UTC-08:00
.. tags: snorkel,weak supervision,data labeling
.. category: Snorkel
.. link: 
.. description: A walk-through of the Snorkel you-tube comments example.
.. type: text
.. status: 
.. updated: 

#+END_COMMENT
* Beginning
  This is a walk-through of the Snorkel [[https://www.snorkel.org/get-started/][Get Started]] tutorial which shows how you can use it to build a labeled dataset. It uses the [[http://www.dt.fee.unicamp.br/~tiago//youtubespamcollection/][YouTube Spam Collection]] data set (downloaded from the [[https://archive.ics.uci.edu/ml/datasets/YouTube+Spam+Collection][UCI Machine Learning Repository]]). The data was collected in 2015 and represents comments from five of the ten most popular videos on YouTube. It is a tabular dataset with the columns =COMMENT_ID=, =AUTHOR=, =DATE=, =CONTENT=, =TAG=. The tag represents whether it was considered /Spam/ or not, so we'll pretend it isn't there for most of this walk-through.
** Imports
*** Python
#+begin_src ipython :session snorkel :results none
from argparse import Namespace
from functools import partial
from pathlib import Path
import re
#+end_src
*** PyPi
#+begin_src ipython :session snorkel :results none
from sklearn.model_selection import train_test_split
from snorkel.labeling import labeling_function
from textblob import TextBlob
import hvplot.pandas
import pandas
#+end_src
*** Others
#+begin_src ipython :session snorkel :results none
from graeae import EmbedHoloviews
#+end_src
** Set Up
*** Plotting
#+begin_src ipython :session snorkel :results none
Embed = partial(EmbedHoloviews, folder_path="../../../files/posts/libraries/snorkel/snorkel-example-building-a-spam-dataset")
#+end_src
*** The Dataset
    The data is split up into separate files - one for each artist/video (they are named after the artist and each only appears to have one entry) so I'm going to smash them back together and add a =artist= column.

#+begin_src ipython :session snorkel :results output :exports both
path = Path("~/data/datasets/texts/you_tube_comments/").expanduser()
sets = []
for name in path.glob("*.csv"):
    artist = name.stem.split()[-1]
    data = pandas.read_csv(name)
    data["artist"] = artist
    sets.append(data)
    print(artist)
data = pandas.concat(sets)
#+end_src

#+RESULTS:
: KatyPerry
: LMFAO
: Eminem
: Shakira
: Psy


*** Splitting the Set
#+begin_src ipython :session snorkel :results output :exports both
train, test = train_test_split(data)
print(train.shape)
print(test.shape)

train, development = train_test_split(train)
validation, test = train_test_split(test)
print(train.shape)
print(development.shape)
print(validation.shape)
print(test.shape)
#+end_src

#+RESULTS:
: (1467, 6)
: (489, 6)
: (1100, 6)
: (367, 6)
: (366, 6)
: (123, 6)

#+begin_src ipython :session snorkel :results output raw :exports both
grouped = train.groupby(["artist"]).agg({"COMMENT_ID": "count"}).reset_index().rename(columns={"COMMENT_ID": "Count"})
plot = grouped.hvplot.bar(x="artist", y="Count").opts(title="Comments by Artist", width=1000, height=800)
Embed(plot=plot, file_name="comments_by_artist")()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="comments_by_artist.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

#+begin_src ipython :session snorkel :results output raw :exports both
grouped = train.groupby(["artist", "CLASS"]).agg({"COMMENT_ID": "count"}).reset_index().rename(columns={"COMMENT_ID": "Count"})
plot = grouped.hvplot.bar(x="artist", y="Count", by="CLASS").opts(title="Comments by Artist and Class", width=1000, height=800)
Embed(plot=plot, file_name="comments_by_artist_and_class")()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="comments_by_artist_and_class.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

I said earlier that the spam/not-spam column was named tag, but its named =CLASS= here, I don't know where the switch came (it says =TAG= on the UCI page).


** Labeling Functions
   Labeling functions output a label for values in the training set.
*** Labels
#+begin_src ipython :session snorkel :results none
Label = Namespace(
    abstain = -1,
    not_spam = 0,
    spam = 1,
)
#+end_src

The actual data-set only has spam/not-spam classes, but the Snorkel tutorial adds the =abstain= class as well.

*** Keyword Matching

#+begin_src ipython :session snorkel :results none
@labeling_function()
def labeling_by_keyword(comment) -> int:
    """Assume if the author refers to something he/she owns it's spam"""
    return Label.spam if "my" in comment.text.lower() else label.abstain
#+end_src

*** Regular Expressions

#+begin_src ipython :session snorkel :results none
@labeling_function()
def label_check_out(comment) -> int:
    """check my/it/the out will be spam"""
    return Label.spam if re.search(r"check.*out", comment.text, flags=re.I) else Label.abstain
#+end_src

*** Short Comments
#+begin_src ipython :session snorkel :results none
@labeling_function()
def label_short_comment(comment) -> int:
    """if a comment is short it's probably not spam"""
    return Label.not_spam if len(comment.text.split()) < 5 else Label.abstain
#+end_src

*** Positive Comments
    Here we'll use [[https://textblob.readthedocs.io/en/dev/][textblob]] to try and decide on whether a comment is positive (textblob uses [[https://www.clips.uantwerpen.be/pattern][pattern]] to decide on the polarity.)

#+begin_src ipython :session snorkel :results none
@labeling_function()
def label_positive_comment(comment) -> int:
    """If a comment is positive, we'll accept it"""
    return Label.not_spam if TextBlob(comment.text).sentiment.polarity > 0.3 else Label.abstain
#+end_src
