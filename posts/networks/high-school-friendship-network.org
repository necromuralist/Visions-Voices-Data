#+BEGIN_COMMENT
.. title: High School Friendship Networks
.. slug: high-school-friendship-networks
.. date: 2019-03-24 17:38:17 UTC-07:00
.. tags: networks,exploration
.. category: Networks
.. link: 
.. description: A look at the High School Contact and Friendship Networks.
.. type: text
.. status:
.. updated: 2019-03-27 00:11:17 UTC-07:00

#+END_COMMENT
#+OPTIONS: H:5
#+TOC: headlines 2
#+BEGIN_SRC ipython :session highschool :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC
* The Departure
  This looks at data provided by [[http://www.sociopatterns.org][SocioPatterns]] that looks a the interactions between students at a High School in Marseilles, France, in December of 2013. In particular, I'm going to look at the /Friendship Networks/ data - wherein the students reported who they were friends with.
*** Imports
**** From Python
#+begin_src ipython :session highschool :results none
from collections import Counter
from functools import partial
from pathlib import Path
import os
#+end_src
**** From PyPi
#+begin_src ipython :session highschool :results none
from bokeh.models import HoverTool
from dotenv import load_dotenv
from holoviews import dim, opts
import holoviews
import hvplot.pandas
import networkx
import pandas as pandas
#+end_src
**** My Stuff
#+begin_src ipython :session highschool :results none
from graeae.timers import Timer
from graeae.tables import CountPercentage
from graeae.visualization import EmbedHoloview
#+end_src
*** Load the Dotenv
#+begin_src ipython :session highschool :results none
load_dotenv(".env")
#+end_src
*** Build the Timer
#+begin_src ipython :session highschool :results none
TIMER = Timer()
#+end_src
** Setup The Plotting
#+begin_src ipython :session highschool :results none
holoviews.extension("bokeh")
SLUG = "high-school-friendship-networks/"
output = Path("../../files/posts/networks/" + SLUG)
Embed = partial(EmbedHoloview, folder_path=output)
#+end_src

#+begin_src ipython :session highschool :results none
class Plot:
    """Constants for plotting"""
    width = 1000
    height = 800
    fontsize = 18
    edge_color = "LightSteelBlue"
#+end_src
* The Initiation
** Meta-Data
   Let's take a look at the meta-data before loading it into pandas.

#+begin_src ipython :session highschool :results none
HIGH_SCHOOL = Path(os.environ.get("HIGH_SCHOOL")).expanduser()
assert HIGH_SCHOOL.is_dir()

#+begin_src ipython :session highschool :results none
class Files:
    metadata = "metadata_2013.txt"
    contact_diaries = "Contact-diaries-network_data_2013.csv"
    facebook = "Facebook-known-pairs_data_2013.csv"
    friendship = "Friendship-network_data_2013.csv"
    high_school = "High-School_data_2013.csv"
#+end_src

#+begin_src ipython :session highschool :results output :exports both
metadata_path = HIGH_SCHOOL.joinpath(Files.metadata)
assert metadata_path.is_file()
with metadata_path.open() as reader:
    for line in range(5):
        print(reader.readline(), end="")
#+end_src

#+RESULTS:
: 650	2BIO1	F
: 498	2BIO1	F
: 627	2BIO1	F
: 857	2BIO1	F
: 487	2BIO1	F

This file has the meta-data for the students. The three columns are the student's ID, class, and gender. I don't know what /class/ refers to here.

#+begin_src ipython :session highschool :results none
meta_data = pandas.read_csv(metadata_path, sep="\t", 
                            names=["id", "class", "gender"])
meta_data.loc[:, "class"] = meta_data["class"].astype("category")
meta_data.loc[:, "gender"] = meta_data.gender.astype("category")
#+end_src

#+begin_src ipython :session highschool :results output :exports both
print(len(meta_data))
print(len(meta_data.id.unique()))
#+end_src

#+RESULTS:
: 329
: 329

So there's one entry for each student, meaning the student's can't belong to more than one class.

*** Classes
First a table of the counts.
#+begin_src ipython :session highschool :results output raw :exports both
table = CountPercentage(meta_data["class"]).holoviews_table.opts(
    width=Plot.width,
    height=256,
    fontsize=Plot.fontsize,
)
Embed(plot=table, file_name="class_table", height_in_pixels=270)()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="class_table.html" style="width:100%" height=270>
  <p>Figure Missing</p>
</object>
#+end_export

The fact that there are nine classes makes it seem like it's not likely they are 'classes' in the sense of freshman, sophomores, etc. At the same time, since each student only has one class, it doesn't seem like they are 'classes' in the sense of "Biology 101".

Now a bar-plot to look at how the classes are distributed.

#+begin_src ipython :session highschool :results none
grouped = meta_data.groupby(["class", "gender"]).agg(
    {"class": "count", "gender": "count"})
grouped.columns = ["class_count", "gender_count"]
grouped = grouped.reset_index()
#+end_src

#+begin_src ipython :session highschool :results none
grouped.loc[:, "class"]= grouped["class"].astype(str)
#+end_src

#+begin_src ipython :session highschool :results output raw :exports both
plot = grouped.hvplot.bar("class", "class_count", title="Class Counts by Gender", 
                          stacked=True,
                          by="gender", height=Plot.height, 
                          width=Plot.width,
                          ylabel="Count",
                          xlabel="Class",
                          tools=["hover"],
                          fontsize=Plot.fontsize).opts(xrotation=90)
Embed(plot=plot, file_name="gender_counts_stacked", height_in_pixels=Plot.height)()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="gender_counts_stacked.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

[[file:gender_counts_stacked.html][Link to Plot]]

This is a look at the same thing except not stacked.
#+begin_src ipython :session highschool :results output raw :exports both
plot = grouped.hvplot.bar(title="Class Counts by Gender", x="class", 
                          y="class_count",
                          xlabel="Class",
                          ylabel="Count",
                          by="gender", height=Plot.height, width=Plot.width, 
                          tools=["hover"],
                          fontsize=Plot.fontsize).opts(xrotation=90)
Embed(plot=plot, file_name="gender_counts", height_in_pixels=Plot.height)()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="gender_counts.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

[[file:gender_counts.html][Link to Plot]]

Strangely, the classes that start with =2BIO= are more female while the others are more male.
*** Gender
     A stacked bar plot to get a sense of not just the distribution among genders but among classes.
#+begin_src ipython :session highschool :results output raw :exports both
plot = grouped.hvplot.bar(title="Gender Counts", x="gender", y="gender_count",
                          stacked=True,
                          by="class", 
                          xlabel="Count",
                          ylabel="Gender",
                          fontsize=Plot.fontsize,
                          width=Plot.width,
                          height=Plot.height).opts(
                              legend_position="top_right",
                              xrotation=90, 
                              xlabel="Gender and Class")
Embed(plot=plot, file_name="class_counts_stacked", height_in_pixels=Plot.height)()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="class_counts_stacked.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

[[file:class_counts_stacked.html][Link to Plot]]

A non-stacked bar plot to get a better sense of how the genders fill the different classes.

#+begin_src ipython :session highschool :results output raw :exports both
plot = grouped.hvplot.bar(title="Gender Counts", x="gender", y="gender_count",
                          xlabel="Gender",
                          ylabel="Count",
                          by="class", 
                          height=Plot.height,
                          width=Plot.width,
                          fontsize=Plot.fontsize).opts(
                              xrotation=90, xlabel="Gender and Class")
Embed(plot=plot, file_name="class_counts", height_in_pixels=Plot.height)()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="class_counts.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

[[file:class_counts.html][Link to Plot]]

It looks like there were a little more males than females, but not a whole lot more.

** The Friendship Network
    This is a dataset that shows whether a student identified another student as their friend.

#+begin_src ipython :session highschool :results output :exports both
friendship_path = HIGH_SCHOOL.joinpath(Files.friendship)
assert friendship_path.is_file()
with friendship_path.open() as reader:
    for line in range(5):
        print(reader.readline(), end="")
#+end_src

#+RESULTS:
: 1 55
: 1 205
: 1 272
: 1 494
: 1 779

The first column is the person who reported who his or her friends were and the second column is the person that was identified as a friend.

#+begin_src ipython :session highschool :results none
friendship_data = pandas.read_csv(friendship_path, delimiter=" ", 
                                  names=["reporter", "friend"])
friendship_data = friendship_data.dropna()
#+end_src

** Looking at the Friendship Network

#+begin_src ipython :session highschool :results output :exports both
with TIMER:
    friendship_graph = networkx.convert_matrix.from_pandas_edgelist(
        friendship_data, "reporter", "friend", 
        create_using=networkx.DiGraph)
#+end_src

#+RESULTS:
: Started: 2019-04-23 12:40:50.512175
: Ended: 2019-04-23 12:40:50.514294
: Elapsed: 0:00:00.002119
#+begin_src ipython :session highschool :results none
genders = dict(zip(meta_data.id, meta_data.gender))
classes = dict(zip(meta_data.id, meta_data["class"]))
#+end_src

#+begin_src ipython :session highschool :results none
for node in friendship_graph.nodes:
    friendship_graph.nodes[node]["gender"] = genders[node]
    friendship_graph.nodes[node]["class"] = classes[node]
#+end_src
** Plotting
*** Friendship Network Circular
**** By Gender
#+begin_src ipython :session highschool :results output raw :exports both
hover = HoverTool(
    tooltips = [
         ("Gender", "@gender"),
         ("Class", "@class"),
    ],
)

plot = holoviews.Graph.from_networkx(friendship_graph,
                                     networkx.circular_layout).opts(
                                         node_color=dim("gender"), cmap="Set1",
                                         tools=[hover],
                                         fontsize=Plot.fontsize,
                                         width=800,
                                         height=800,
                                         edge_line_color=Plot.edge_color,
                                         title="Friendship Network by Gender",
                                         xaxis=None, yaxis=None, directed=True)
Embed(plot=plot, file_name="friendship_network_circular")()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="friendship_network_circular.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

It's a little hard to see what's going on here, other than to note that you can see some people are more popular than others.
**** By Class
#+begin_src ipython :session highschool :results output raw :exports both
hover = HoverTool(
    tooltips = [
         ("Gender", "@gender"),
         ("Class", "@class"),
    ],
)

plot = holoviews.Graph.from_networkx(friendship_graph,
                                     networkx.circular_layout).opts(
                                         node_color=dim("class"), cmap="Set1",
                                         tools=[hover],
                                         fontsize=Plot.fontsize,
                                         width=800,
                                         height=800,
                                         edge_line_color=Plot.edge_color,
                                         title="Friendship Network by Class",
                                         xaxis=None, yaxis=None, directed=True)
Embed(plot=plot, file_name="friendship_network_circular_class")()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="friendship_network_circular_class.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

[[file:friendship_network_circular_class.html][Link to Plot]]
*** Spring Layout
**** Class
#+begin_src ipython :session highschool :results output raw :exports both
plot = holoviews.Graph.from_networkx(friendship_graph, networkx.spring_layout, ).opts(
    node_color=dim("class"), cmap="Set1",
    tools=["hover"],
    width=800,
    height=800,
    edge_line_color=Plot.edge_color,
    title="Friendship Network By Class",
    xaxis=None, yaxis=None, directed=True,
    legend_position="right"
)
Embed(plot=plot, file_name="friendship_network_class_spring", height_in_pixels=810)()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="friendship_network_class_spring.html" style="width:100%" height=810>
  <p>Figure Missing</p>
</object>
#+end_export

[[file:friendship_network_class_spring.html][Link to Plot]]

Unlike the circular plot, this plot shows that there are disconnected neighborhoods within the network and there seems to be a clustering by class.

**** Gender
#+begin_src ipython :session highschool :results output raw :exports both
plot = holoviews.Graph.from_networkx(friendship_graph, networkx.spring_layout, ).opts(
                                         node_color=dim("gender"), cmap="Set1",
                                         tools=["hover"],
                                         width=800,
                                         height=800,
                                         edge_line_color=Plot.edge_color,
                                         title="Friendship Network By Gender",
                                         xaxis=None, yaxis=None, directed=True)
Embed(plot=plot, file_name="friendship_network_gender_spring", height_in_pixels=810)()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="friendship_network_gender_spring.html" style="width:100%" height=810>
  <p>Figure Missing</p>
</object>
#+end_export

[[file:friendship_network_gender_spring.html][Link to Plot]]

Interestingly, this view seems to show that there is also some segregation by gender.
** Degree Distribution
*** Total Degrees
#+begin_src ipython :session highschool :results none
degree_sequence = sorted((degree for node, degree in friendship_graph.degree()))
degree_counts = Counter(degree_sequence)
degrees, counts = zip(*degree_counts.items())
#+end_src

#+begin_src ipython :session highschool :results output raw :exports both
table = holoviews.Table({"Degrees": degrees, "Count": counts}, ["Degrees"], ["Count"])
plot = table.to.bars(kdims=["Degrees"], vdims=["Count"]).opts(
    width=Plot.width,
    height=Plot.height,
    fontsize=Plot.fontsize,
    title="Degree Distribution",
    tools=["hover"],
)
Embed(plot=plot, file_name="degree_distribution")()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="degree_distribution.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export
*** In-Degree Distribution
#+begin_src ipython :session highschool :results output raw :exports both
in_degree_sequence = sorted((degree for node, degree in friendship_graph.in_degree))
in_degree_counts = Counter(in_degree_sequence)
in_degrees, in_counts = zip(*in_degree_counts.items())

in_data = pandas.DataFrame.from_dict({"Degrees": in_degrees, "Count": in_counts})
in_data["Direction"] = "in"

plot = in_data.hvplot.bar(x="Degrees", y="Count").opts(
    width=Plot.width,
    height=Plot.height,
    fontsize=Plot.fontsize,
    title="In-Degree Distribution",
    tools=["hover"],
)
Embed(plot=plot, file_name="in_degree_distribution")()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="in_degree_distribution.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

The in-degree represents the number of times a student (the node) was identified by someone else as a friend. Three people weren't identified as friends at all and the most common count was 2, although someone was identified 15 times.

*** Out-Degree Distribution
#+begin_src ipython :session highschool :results output raw :exports both
out_degree_sequence = sorted((degree for node, degree in friendship_graph.out_degree))
out_degree_counts = Counter(out_degree_sequence)
out_degrees, out_counts = zip(*out_degree_counts.items())

out_data = pandas.DataFrame.from_dict({"Degrees": out_degrees, "Count": out_counts})
out_data["Direction"] = "out"
# table = holoviews.Table(, ["Degrees"], ["Count"])
plot = out_data.hvplot.bar(x="Degrees", y="Count").opts(
    width=Plot.width,
    height=Plot.height,
    fontsize=Plot.fontsize,
    title="Out-Degree Distribution",
    tools=["hover"],
)
Embed(plot=plot, file_name="out_degree_distribution")()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="out_degree_distribution.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

The out-degree is the number of other students a student identified as a friend.

*** In-and-Out Degree

#+begin_src ipython :session highschool :results output raw :exports both
in_out = pandas.concat([in_data, 
                        out_data]).sort_values(by="Degrees")
plot = in_out.hvplot.bar(x="Degrees", y="Count", by="Direction").opts(
    width=Plot.width,
    height=Plot.height,
    fontsize=Plot.fontsize,
    title="In and Out-Degree Distribution",
    tools=["hover"],
)
Embed(plot=plot, file_name="in_and_out_degree_distribution")()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="in_and_out_degree_distribution.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

#+begin_src ipython :session highschool :results none
for node in friendship_graph.nodes:
    friendship_graph.nodes[node]["In-Degree"] = friendship_graph.in_degree[node]
    friendship_graph.nodes[node]["Out-Degree"] = friendship_graph.out_degree[node]
#+end_src

#+begin_src ipython :session highschool :results output raw :exports both
plot = holoviews.Graph.from_networkx(friendship_graph, networkx.spring_layout)
plot = plot.opts(
    node_color=dim("gender"), cmap="Set1",
    tools=["hover"],
    width=800,
    height=800,
#    edge_line_color="In-Degree",
    edge_cmap="viridis",
#    edge_line_width=holoviews.dim("In-Degree"),
    title="Friendship Network In-Degrees By Gender",
    xaxis=None, yaxis=None, directed=True)
Embed(plot=plot, file_name="friendship_network_in_degree_gender_spring", height_in_pixels=810)()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="friendship_network_in_degree_gender_spring.html" style="width:100%" height=810>
  <p>Figure Missing</p>
</object>
#+end_export

* The Return
** Citations
   - R. Mastrandrea, J. Fournet, A. Barrat,
Contact patterns in a high school: a comparison between data collected using wearable sensors, contact diaries and friendship surveys.
PLoS ONE 10(9): e0136497 (2015)
