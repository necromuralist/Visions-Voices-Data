#+BEGIN_COMMENT
.. title: High School Contact Networks
.. slug: high-school-contact-networks
.. date: 2019-03-27 17:38:17 UTC-07:00
.. tags: networks,exploration
.. category: Networks
.. link: 
.. description: A look at the High School Contact Networks.
.. type: text
.. status:
.. updated: 2019-03-27 00:11:17 UTC-07:00

#+END_COMMENT
#+OPTIONS: H:5
#+TOC: headlines 2
#+BEGIN_SRC ipython :session highschool :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC
* The Departure
  This looks at data provided by [[http://www.sociopatterns.org][SocioPatterns]] that looks a the interactions between students at a High School in Marseilles, France, in December of 2013.
*** Imports
**** From Python
#+begin_src ipython :session highschool :results none
from collections import Counter
from functools import partial
from pathlib import Path
import os
#+end_src
**** From PyPi
#+begin_src ipython :session highschool :results none
from bokeh.models import HoverTool
from dotenv import load_dotenv
from holoviews import dim, opts
from holoviews.operation.datashader import datashade, bundle_graph
import holoviews
import hvplot.pandas
import networkx
import pandas as pandas
#+end_src
**** My Stuff
#+begin_src ipython :session highschool :results none
from graeae.timers import Timer
from graeae.visualization import EmbedHoloview
#+end_src
*** Load the Dotenv
#+begin_src ipython :session highschool :results none
load_dotenv(".env")
#+end_src
*** Build the Timer
#+begin_src ipython :session highschool :results none
TIMER = Timer()
#+end_src
** Setup The Plotting
#+begin_src ipython :session highschool :results none
holoviews.extension("bokeh")
SLUG = "high-school-contact-networks/"
output = Path("../../files/posts/networks/" + SLUG)
Embed = partial(EmbedHoloview, folder_path=output)
#+end_src

#+begin_src ipython :session highschool :results none
class Plot:
    """Constants for plotting"""
    width = 1000
    height = 800
    fontsize = 18
#+end_src
** Load The Data
   Let's take a look at the data before loading it into pandas.

#+begin_src ipython :session highschool :results none
HIGH_SCHOOL = Path(os.environ.get("HIGH_SCHOOL")).expanduser()
assert HIGH_SCHOOL.is_dir()

#+begin_src ipython :session highschool :results none
class Files:
    metadata = "metadata_2013.txt"
    contact_diaries = "Contact-diaries-network_data_2013.csv"
    facebook = "Facebook-known-pairs_data_2013.csv"
    friendship = "Friendship-network_data_2013.csv"
    high_school = "High-School_data_2013.csv"
#+end_src

*** MetaData
#+begin_src ipython :session highschool :results output :exports both
metadata_path = HIGH_SCHOOL.joinpath(Files.metadata)
assert metadata_path.is_file()
with metadata_path.open() as reader:
    for line in range(5):
        print(reader.readline(), end="")
#+end_src

#+RESULTS:
: 650	2BIO1	F
: 498	2BIO1	F
: 627	2BIO1	F
: 857	2BIO1	F
: 487	2BIO1	F

This first file has the meta-data for the students. The three columns are the student's ID, class, and gender.

#+begin_src ipython :session highschool :results none
meta_data = pandas.read_csv(metadata_path, sep="\t", 
                            names=["id", "class", "gender"])
meta_data.loc[:, "class"] = meta_data["class"].astype("category")
meta_data.loc[:, "gender"] = meta_data.gender.astype("category")
#+end_src

**** Classes
     First a bar-plot to look at how the classes are distributed.

#+begin_src ipython :session highschool :results none
grouped = meta_data.groupby(["class", "gender"]).agg(
    {"class": "count", "gender": "count"})
grouped.columns = ["class_count", "gender_count"]
grouped = grouped.reset_index()
#+end_src

#+begin_src ipython :session highschool :results output raw :exports both
plot = grouped.hvplot.bar(title="Class Counts by Gender", 
                          x="class", y="class_count", 
                          stacked=True,
                          by="gender", height=Plot.height, 
                          width=Plot.width,
                          ylabel="Count",
                          xlabel="Class",
                          tools=["hover"],
                          fontsize=Plot.fontsize).opts(xrotation=90)
Embed(plot=plot, file_name="gender_counts_stacked", height_in_pixels=Plot.height)()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="gender_counts_stacked.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

[[file:gender_counts_stacked.html][Link to Plot]]

This is a look at the same thing except not stacked.
#+begin_src ipython :session highschool :results output raw :exports both
plot = grouped.hvplot.bar(title="Class Counts by Gender", x="class", 
                          y="class_count",
                          xlabel="Class",
                          ylabel="Count",
                          by="gender", height=Plot.height, width=Plot.width, 
                          tools=["hover"],
                          fontsize=Plot.fontsize).opts(xrotation=90)
Embed(plot=plot, file_name="gender_counts", height_in_pixels=Plot.height)()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="gender_counts.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

[[file:gender_counts.html][Link to Plot]]

Strangely, the classes that start with =2BIO= are more female while the others are more male.
**** Gender
     A stacked bar plot to get a sense of not just the distribution among genders but among classes.
#+begin_src ipython :session highschool :results output raw :exports both
plot = grouped.hvplot.bar(title="Gender Counts", x="gender", y="gender_count",
                          stacked=True,
                          by="class", 
                          xlabel="Count",
                          ylabel="Gender",
                          fontsize=Plot.fontsize,
                          width=Plot.width,
                          height=Plot.height).opts(
                              xrotation=90, 
                              xlabel="Gender and Class")
Embed(plot=plot, file_name="class_counts_stacked", height_in_pixels=Plot.height)()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="class_counts_stacked.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

[[file:class_counts_stacked.html][Link to Plot]]

A non-stacked bar plot to get a better sense of how the genders fill the different classes.

#+begin_src ipython :session highschool :results output raw :exports both
plot = grouped.hvplot.bar(title="Gender Counts", x="gender", y="gender_count",
                          xlabel="Gender",
                          ylabel="Count",
                          by="class", 
                          height=Plot.height,
                          width=Plot.width,
                          fontsize=Plot.fontsize).opts(
                              xrotation=90, xlabel="Gender and Class")
Embed(plot=plot, file_name="class_counts", height_in_pixels=Plot.height)()
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="class_counts.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

[[file:class_counts.html][Link to Plot]]

It looks like there were a little more males than females, but not a whole lot more.

* The Descent
*** The Contact Network
    This is a dataset that shows whether a student logged contact with another student.

#+begin_src ipython :session highschool :results output :exports both
contact_path = HIGH_SCHOOL.joinpath(Files.contact_diaries)
assert contact_path.is_file()
with contact_path.open() as reader:
    for line in range(5):
        print(reader.readline(), end="")
#+end_src

#+RESULTS:
: 3 28 2
: 3 106 1
: 3 147 4
: 3 177 1
: 3 295 4

The columns are the person who was making the report, the person that was identified as a contact, and the time spent ecoded into one of four values.

| Code | Lower Limit (minutes) | Upper Limit (minutes) |
|------+-----------------------+-----------------------|
|    1 |                     0 |                     5 |
|    2 |                     5 |                    15 |
|    3 |                    15 |                    60 |
|    4 |                    60 |              infinity |

#+begin_src ipython :session highschool :results none
contact_data = pandas.read_csv(contact_path, delimiter=" ", 
                                  names=["reporter", "contact", "time"])
contact_data = contact_data.dropna()
#+end_src

* End
** Citations
   - R. Mastrandrea, J. Fournet, A. Barrat,
Contact patterns in a high school: a comparison between data collected using wearable sensors, contact diaries and friendship surveys.
PLoS ONE 10(9): e0136497 (2015)
