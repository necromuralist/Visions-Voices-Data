#+BEGIN_COMMENT
.. title: Some Networkx Examples
.. slug: some-networkx-examples
.. date: 2019-04-12 13:12:58 UTC-07:00
.. tags: networkx,networks
.. category: Networks
.. link: 
.. description: Some examples of using networkx.
.. type: text
.. status: 
.. updated: 

#+END_COMMENT
#+OPTIONS: H:5
#+TOC: headlines 2
* The Departure
  This is a look at different ways of creating and manipulating graphs using [[https://networkx.github.io][NetworkX]].
** Imports
*** Python
#+BEGIN_SRC ipython :session networkx :results none
from functools import partial
from pathlib import Path
import os
#+END_SRC
*** PyPi
#+BEGIN_SRC ipython :session networkx :results none
from bokeh.models import HoverTool
import holoviews
import hvplot.pandas
import networkx
import numpy
import pandas
#+END_SRC
*** My Stuff
#+BEGIN_SRC ipython :session networkx :results none
from graeae.visualization import EmbedHoloview
#+END_SRC
** Set Up
#+BEGIN_SRC ipython :session networkx :results none
SLUG = "some-networkx-examples"
OUTPUT_PATH = Path("../../files/posts/networks/" + SLUG)
Embed = partial(EmbedHoloview, folder_path=OUTPUT_PATH)
#+END_SRC

* The Initiation
** Different Ways to Create Network Graphs
*NetworkX* has a few different ways to create graphs, some more flexible than others. This is a non-exhaustive showing of some of them.
*** Adding Edges To An Existing Graph
    You can create a graph using the graph constructors. This is an example of an undirected [[https://networkx.github.io/documentation/stable/reference/classes/graph.html][Graph]].
#+BEGIN_SRC ipython :session networkx :results none
graph_1 = networkx.Graph()
#+END_SRC

#+BEGIN_SRC ipython :session networkx :results output raw :exports both
G1.add_edges_from([(0, 1),
                   (0, 2),
                   (0, 3),
                   (0, 5),
                   (1, 3),
                   (1, 6),
                   (3, 4),
                   (4, 5),
                   (4, 7),
                   (5, 8),
                   (8, 9)])

networkx.draw_networkx(G1)
#+END_SRC

#+RESULTS:
[[file:/tmp/graph_one.png]]

*** Adjacency List

#+BEGIN_SRC ipython :session networkx :results output
with open("G_adjlist.txt") as reader:
    print(reader.read())
#+END_SRC

#+RESULTS:
#+begin_example
0 1 2 3 5
1 3 6
2
3 4
4 5 7
5 8
6
7
8 9
9

#+end_example

#+BEGIN_SRC ipython :session networkx
G2 = networkx.read_adjlist('G_adjlist.txt', nodetype=int)
G2.edges()
#+END_SRC

#+RESULTS:
| 0 | 1 |
| 0 | 2 |
| 0 | 3 |
| 0 | 5 |
| 1 | 3 |
| 1 | 6 |
| 3 | 4 |
| 4 | 5 |
| 4 | 7 |
| 5 | 8 |
| 8 | 9 |

*** Adjacency Matrix

#+BEGIN_SRC ipython :session networkx
G_mat = numpy.array([[0, 1, 1, 1, 0, 1, 0, 0, 0, 0],
                     [1, 0, 0, 1, 0, 0, 1, 0, 0, 0],
                     [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                     [1, 1, 0, 0, 1, 0, 0, 0, 0, 0],
                     [0, 0, 0, 1, 0, 1, 0, 1, 0, 0],
                     [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
                     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                     [0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                     [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]])
G_mat
#+END_SRC

#+RESULTS:
#+begin_example
array([[0, 1, 1, 1, 0, 1, 0, 0, 0, 0],
       [1, 0, 0, 1, 0, 0, 1, 0, 0, 0],
       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 0, 1, 0, 0],
       [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
       [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]])
#+end_example

#+BEGIN_SRC ipython :session networkx
G3 = networkx.Graph(G_mat)
G3.edges()
#+END_SRC

#+RESULTS:
| 0 | 1 |
| 0 | 2 |
| 0 | 3 |
| 0 | 5 |
| 1 | 3 |
| 1 | 6 |
| 3 | 4 |
| 4 | 5 |
| 4 | 7 |
| 5 | 8 |
| 8 | 9 |

*** Edgelist

#+BEGIN_SRC ipython :session networkx :results output
with open('G_edgelist.txt') as reader:
    print(reader.read())
#+END_SRC

#+RESULTS:
#+begin_example
0 1 4
0 2 3
0 3 2
0 5 6
1 3 2
1 6 5
3 4 3
4 5 1
4 7 2
5 8 6
8 9 1

#+end_example

#+BEGIN_SRC ipython :session networkx
G4 = networkx.read_edgelist('G_edgelist.txt', data=[('Weight', int)])

G4.edges(data=True)
#+END_SRC

#+RESULTS:
| 6 | 1 | (Weight : 5) |
| 4 | 7 | (Weight : 2) |
| 4 | 3 | (Weight : 3) |
| 4 | 5 | (Weight : 1) |
| 0 | 2 | (Weight : 3) |
| 0 | 3 | (Weight : 2) |
| 0 | 1 | (Weight : 4) |
| 0 | 5 | (Weight : 6) |
| 1 | 3 | (Weight : 2) |
| 8 | 9 | (Weight : 1) |
| 8 | 5 | (Weight : 6) |

*** Pandas DataFrame

#+BEGIN_SRC ipython :session networkx
G_df = pandas.read_csv('G_edgelist.txt', delim_whitespace=True, 
                       header=None, names=['n1', 'n2', 'weight'])
G_df
#+END_SRC

#+RESULTS:
#+begin_example
    n1  n2  weight
0    0   1       4
1    0   2       3
2    0   3       2
3    0   5       6
4    1   3       2
5    1   6       5
6    3   4       3
7    4   5       1
8    4   7       2
9    5   8       6
10   8   9       1
#+end_example


#+BEGIN_SRC ipython :session networkx
G5 = networkx.from_pandas_dataframe(G_df, 'n1', 'n2', edge_attr='weight')
G5.edges(data=True)
#+END_SRC

#+RESULTS:
| 0 | 1 | (weight : 4) |
| 0 | 2 | (weight : 3) |
| 0 | 3 | (weight : 2) |
| 0 | 5 | (weight : 6) |
| 1 | 3 | (weight : 2) |
| 1 | 6 | (weight : 5) |
| 3 | 4 | (weight : 3) |
| 4 | 5 | (weight : 1) |
| 4 | 7 | (weight : 2) |
| 5 | 8 | (weight : 6) |
| 8 | 9 | (weight : 1) |

** A Chess Example

#+BEGIN_SRC ipython :session networkx :results output
with open('chess_graph.txt') as reader:
    count = 0
    for line in reader:
        print(line.strip())
        count += 1
        if count == 5:
            break
#+END_SRC

#+RESULTS:
: 1 2 0	885635999.999997
: 1 3 0	885635999.999997
: 1 4 0	885635999.999997
: 1 5 1	885635999.999997
: 1 6 0	885635999.999997


#+BEGIN_SRC ipython :session networkx :results none
chess = networkx.read_edgelist('chess_graph.txt', data=[('outcome', int), ('timestamp', float)], 
                         create_using=networkx.MultiDiGraph())
#+END_SRC

#+BEGIN_SRC ipython :session networkx
chess.is_directed(), chess.is_multigraph()
#+END_SRC

#+RESULTS:
| True | True |

#+BEGIN_SRC ipython :session networkx
chess.edges(data=True)[:5]
#+END_SRC

#+RESULTS:
| 5236 | 1766 | (outcome : 1 timestamp : 1127412000.0)  |
| 3542 |  448 | (outcome : -1 timestamp : 1011780000.0) |
| 3542 |  778 | (outcome : -1 timestamp : 1114272000.0) |
| 3542 | 1881 | (outcome : -1 timestamp : 1132668000.0) |
| 3542 | 6156 | (outcome : 1 timestamp : 1132668000.0)  |

#+BEGIN_SRC ipython :session networkx
games_played = chess.degree()
games_played
#+END_SRC

#+RESULTS:


#+BEGIN_SRC ipython :session networkx :results output
max_value = max(games_played.values())
max_key, = [i for i in games_played.keys() if games_played[i] == max_value]

print('player {}\n{} games'.format(max_key, max_value))
#+END_SRC

#+BEGIN_SRC ipython :session networkx :results output
df = pd.DataFrame(chess.edges(data=True), columns=['white', 'black', 'outcome'])
df.head()
#+END_SRC


#+BEGIN_SRC ipython :session networkx :results output
df['outcome'] = df['outcome'].map(lambda x: x['outcome'])
df.head()
#+END_SRC

#+BEGIN_SRC ipython :session networkx :results output
won_as_white = df[df['outcome']==1].groupby('white').sum()
won_as_black = df[df['outcome']==-1].groupby('black').sum()
win_count = won_as_white.add(won_as_black, fill_value=0)
print(win_count.head())
#+END_SRC

#+BEGIN_SRC ipython :session networkx :results output
win_count.nlargest(5, 'outcome')
#+END_SRC
* The Return
