#+BEGIN_COMMENT
.. title: The Geopandas DataFrame Coordinates Example
.. slug: the-geopandas-dataframe-coordinates-example
.. date: 2020-11-18 22:02:55 UTC-08:00
.. tags: geopandas,mapping,pandas,example
.. category: Mapping
.. link: 
.. description: Looking at the Geopandas DataFrame coordinates example.
.. type: text
.. status: 
.. updated: 

#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 3

#+PROPERTY: header-args :session ~/.local/share/jupyter/runtime/kernel-2e6ea0e6-0839-4e96-b66e-962ab48265cc-ssh.json

#+BEGIN_SRC python :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC
* Beginning
** Imports
#+begin_src python :results none
# python
from functools import partial

# pypi
import geopandas
import hvplot.pandas
import matplotlib.pyplot as pyplot
import pandas

# my stuff
from graeae import EmbedHoloviews
#+end_src
** Set Up
#+begin_src python :results none
Embed = partial(EmbedHoloviews, folder_path="files/posts/the-geopandas-dataframe-coordinates-example")
#+end_src   
* Middle
** Longitudes and Latitudes
#+begin_src python :results none
data = pandas.DataFrame(
    {'City': ['Buenos Aires', 'Brasilia', 'Santiago', 'Bogota', 'Caracas'],
     'Country': ['Argentina', 'Brazil', 'Chile', 'Colombia', 'Venezuela'],
     'Latitude': [-34.58, -15.78, -33.45, 4.60, 10.48],
     'Longitude': [-58.66, -47.91, -70.66, -74.08, -66.86]})
#+end_src

#+begin_src python :results none
geoframe = geopandas.GeoDataFrame(data,
                                  geometry=geopandas.points_from_xy(
                                      data.Longitude, data.Latitude))
#+end_src

#+begin_src python :results output :exports both
print(geoframe.head())
#+end_src

#+RESULTS:
:            City    Country  Latitude  Longitude                     geometry
: 0  Buenos Aires  Argentina    -34.58     -58.66  POINT (-58.66000 -34.58000)
: 1      Brasilia     Brazil    -15.78     -47.91  POINT (-47.91000 -15.78000)
: 2      Santiago      Chile    -33.45     -70.66  POINT (-70.66000 -33.45000)
: 3        Bogota   Colombia      4.60     -74.08    POINT (-74.08000 4.60000)
: 4       Caracas  Venezuela     10.48     -66.86   POINT (-66.86000 10.48000)

** Plot It

#+begin_src python :results none
# read in the plotting data
world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))

# restrict it to South America.
ax = world[world.continent == 'South America'].plot(
    color='white', edgecolor='black')

# We can now plot our ``GeoDataFrame``.
geoframe.plot(ax=ax, color='red')

pyplot.savefig("files/posts/the-geopandas-dataframe-coordinates-example/south_america.png")
#+end_src

[[file:south_america.png]]

** With Holoviews
   Since this is going to be interactive we can add more to the plot.
   
#+begin_src python :results output :exports both
print(world.head())
#+end_src   

#+RESULTS:
#+begin_example
     pop_est      continent                      name iso_a3  gdp_md_est  \
0     920938        Oceania                      Fiji    FJI      8374.0   
1   53950935         Africa                  Tanzania    TZA    150600.0   
2     603253         Africa                 W. Sahara    ESH       906.5   
3   35623680  North America                    Canada    CAN   1674000.0   
4  326625791  North America  United States of America    USA  18560000.0   

                                            geometry  
0  MULTIPOLYGON (((180.00000 -16.06713, 180.00000...  
1  POLYGON ((33.90371 -0.95000, 34.07262 -1.05982...  
2  POLYGON ((-8.66559 27.65643, -8.66512 27.58948...  
3  MULTIPOLYGON (((-122.84000 49.00000, -122.9742...  
4  MULTIPOLYGON (((-122.84000 49.00000, -120.0000...  
#+end_example

Let's add the population estimate to the countries and the city to the points.

#+begin_src python :results none
world_plot = world[world.continent == "South America"].hvplot(
    color="white",
    x="Longitude",
    y="Latitude",
    legend=False,
    hover_cols=["pop_est", "name"])

# NOTE: the overlay uses the pandas.DataFrame, not the GeoDataFrame
points = data.hvplot.points("Longitude", "Latitude", hover_cols=["City"])
plot = (world_plot * points).opts(
    title="South American Cities",
    width=700,
    height=890,
)
outcome = Embed(plot=plot, file_name="south_america", height_in_pixels=1000)()
#+end_src

#+begin_src python :results output html :exports both
print(outcome)
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="south_america.html" style="width:100%" height=1000>
  <p>Figure Missing</p>
</object>
#+end_export

This was mostly a check to see if I could get it working so I'll have to think about adding more explanations later.

** Notes
   - To get matplotlib to work I had to install descartes (=pip install descartes=)
   - To get hvplot to work I had to install geoviews (=pip install geoviews=)
* Links
  - [[https://geopandas.org/gallery/create_geopandas_from_pandas.html#sphx-glr-gallery-create-geopandas-from-pandas-py][The Geopandas Example]]
  - [[https://coderzcolumn.com/tutorials/data-science/how-to-convert-static-maps-geopandas-to-interactive-maps-hvplot][coderzcolumn example]] showing hvplot with geopandas
  - [[https://stackoverflow.com/questions/59678780/show-extra-columns-when-hovering-in-a-scatter-plot-with-hvplot][Stack Overflow answer]] to adding columns to the hover
