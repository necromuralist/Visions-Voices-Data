#+BEGIN_COMMENT
.. title: GISS Zone Anomalies
.. slug: giss-zone-anomalies
.. date: 2019-03-08 12:58:41 UTC-08:00
.. tags: giss,coursera,assignment
.. category: Assignment
.. link: 
.. description: Visualizing the temperature anomalies by zone.
.. type: text

#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 2
#+BEGIN_SRC ipython :session giss :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC
* Introduction
  This is a look at the [[https://data.giss.nasa.gov/gistemp/][Godard Institute for Space Studies' surface temperature data]]. I'll look at the mean difference between the yearly mean and the historical "normal" mean.
* Set Up
** Imports
*** Python
#+begin_src ipython :session giss :results none
from functools import partial
from pathlib import Path
import os
#+end_src
*** PyPi
#+begin_src ipython :session giss :results none
from dotenv import load_dotenv
from holoviews import opts
import holoviews
from holoviews.plotting.links import RangeToolLink
from bokeh.models import HoverTool
from bokeh.palettes import Category20

import hvplot.pandas
import pandas
import seaborn
#+end_src
*** This Project
#+begin_src ipython :session giss :results none
from bartleby_the_penguin.tangles.embed_bokeh import EmbedBokeh
from graeae.tables import CountPercentage
#+end_src
** Load Dotenv
#+begin_src ipython :session giss :results none
load_dotenv(".env")
#+end_src
** HoloViews Backend
#+begin_src ipython :session giss :results none
holoviews.extension("bokeh", width=800)
#+end_src
** The Embedder
#+begin_src ipython :session giss :results none
OUTPUT_PATH = Path("../../files/posts/giss/giss-zone-anomalies/")
Embed = partial(EmbedBokeh, 
                folder_path=OUTPUT_PATH)
#+end_src
** Some Settings
#+begin_src ipython :session giss :results none
class Plots:
    width = 1100
    height = 600
    font = "Open Sans"
    font_size = "24pt"
    line_width = 3
    tools =  ["hover"]
    blue = seaborn.color_palette()[0]
    light_blue = Category20[3][1]
    red = seaborn.color_palette()[3]
    yellow = seaborn.color_palette()[1]
    green = seaborn.color_palette()[2]
    gray = seaborn.color_palette()[7]
#+end_src
* The Data
  The data is the /Combined Land-Surface Air and Sea-Surface Water Temperature Anomolies'/ [[https://data.giss.nasa.gov/gistemp/tabledata_v3/ZonAnn.Ts+dSST.csv][Zonal Annual Means]] which shows the different annual mean for each zone in a given year.
#+begin_src ipython :session giss :results none
zone_path = Path(os.environ.get("ZONES")).expanduser()
assert zone_path.is_file()
with zone_path.open() as reader:
    giss = pandas.read_csv(reader)
#+end_src

#+begin_src ipython :session giss :results output :exports both
print(giss.describe())
#+end_src

#+RESULTS:
#+begin_example
              Year        Glob        NHem        SHem     24N-90N  \
count   139.000000  139.000000  139.000000  139.000000  139.000000   
mean   1949.000000    0.032302    0.056043    0.008561    0.077698   
std      40.269923    0.336896    0.393435    0.301848    0.464606   
min    1880.000000   -0.490000   -0.540000   -0.490000   -0.580000   
25%    1914.500000   -0.200000   -0.220000   -0.235000   -0.280000   
50%    1949.000000   -0.070000   -0.010000   -0.080000    0.020000   
75%    1983.500000    0.215000    0.210000    0.265000    0.255000   
max    2018.000000    0.980000    1.260000    0.710000    1.500000   

          24S-24N     90S-24S     64N-90N     44N-64N     24N-44N     EQU-24N  \
count  139.000000  139.000000  139.000000  139.000000  139.000000  139.000000   
mean     0.036115   -0.018561    0.111079    0.117770    0.027698    0.027626   
std      0.331384    0.295695    0.917715    0.516729    0.356416    0.326111   
min     -0.650000   -0.470000   -1.640000   -0.710000   -0.590000   -0.720000   
25%     -0.215000   -0.250000   -0.545000   -0.270000   -0.200000   -0.230000   
50%     -0.030000   -0.100000    0.020000    0.000000   -0.070000    0.000000   
75%      0.255000    0.230000    0.660000    0.360000    0.135000    0.240000   
max      0.970000    0.700000    3.050000    1.440000    1.060000    0.930000   

          24S-EQU     44S-24S     64S-44S     90S-64S  
count  139.000000  139.000000  139.000000  139.000000  
mean     0.045683    0.020432   -0.069353   -0.078129  
std      0.343385    0.312688    0.269380    0.732359  
min     -0.580000   -0.430000   -0.540000   -2.570000  
25%     -0.210000   -0.220000   -0.265000   -0.490000  
50%     -0.030000   -0.080000   -0.090000    0.050000  
75%      0.290000    0.260000    0.180000    0.410000  
max      1.020000    0.780000    0.450000    1.270000  
#+end_example

So we have years from 1880 through 2018.

#+begin_src ipython :session giss :results output :exports both
print(giss.iloc[0])
#+end_src

#+RESULTS:
#+begin_example
Year       1880.00
Glob         -0.18
NHem         -0.31
SHem         -0.06
24N-90N      -0.38
24S-24N      -0.17
90S-24S      -0.01
64N-90N      -0.97
44N-64N      -0.47
24N-44N      -0.25
EQU-24N      -0.21
24S-EQU      -0.13
44S-24S      -0.04
64S-44S       0.05
90S-64S       0.67
Name: 0, dtype: float64
#+end_example

* Tidying the Data
I'm going to use the locations for names so I'll make them something more meaningful for me. I don't know if these are, strictly speaking, the right names, but it's close enough.

#+begin_src ipython :session giss :results output :exports both
name_remap = {
    "Glob": "Global",
    "NHem": "Northern Hemisphere",
    "SHem": "Southern Hemisphere",
    "24N-90N": "Northern Extratropics",
    "24S-24N": "Tropics",
    "90S-24S": "Southern Extratropics",
    "64N-90N": "North Frigid",
    "44N-64N": "North Temperate",
    "24N-44N": "North Sub-Tropic",
    "EQU-24N": "Tropic of Cancer",
    "24S-EQU": "Tropic of Capricorn",
    "44S-24S": "South Sub-Tropic",
    "64S-44S": "South Temperate",
    "90S-64S": "South Frigid",
}
giss = giss.rename(columns=name_remap)
print(giss.columns)
#+end_src

#+RESULTS:
: Index(['Year', 'Global', 'Northern Hemisphere', 'Southern Hemisphere',
:        'Northern Extratropics', 'Tropics', 'Southern Extratropics',
:        'North Frigid', 'North Temperate', 'North Sub-Tropic',
:        'Tropic of Cancer', 'Tropic of Capricorn', 'South Sub-Tropic',
:        'South Temperate', 'South Frigid'],
:       dtype='object')

#+begin_src ipython :session giss :results output :exports both
giss_tidy = giss.melt(id_vars=["Year"], var_name="location", 
                      value_name="Difference From Normal")
print(giss_tidy.iloc[0])
#+end_src

#+RESULTS:
: Year                        1880
: location                  Global
: Difference From Normal     -0.18
: Name: 0, dtype: object

#+begin_src ipython :session giss :results output raw :exports both
location = CountPercentage(giss_tidy.location)
# plot = location.table.hvplot.table()
# Embed(plot, "location_table")()
location()
#+end_src

#+RESULTS:
| Value                 | Count | Percentage |
|-----------------------+-------+------------|
| South Temperate       |   139 |       7.14 |
| South Sub-Tropic      |   139 |       7.14 |
| Southern Hemisphere   |   139 |       7.14 |
| Tropics               |   139 |       7.14 |
| North Temperate       |   139 |       7.14 |
| Northern Hemisphere   |   139 |       7.14 |
| South Frigid          |   139 |       7.14 |
| North Sub-Tropic      |   139 |       7.14 |
| Tropic of Cancer      |   139 |       7.14 |
| North Frigid          |   139 |       7.14 |
| Southern Extratropics |   139 |       7.14 |
| Northern Extratropics |   139 |       7.14 |
| Tropic of Capricorn   |   139 |       7.14 |
| Global                |   139 |       7.14 |

* Frigid North
#+begin_src ipython :session giss :results output raw :exports both
# The Parts
curve = holoviews.Curve(
    giss, "Year",
    ("North Frigid", "Temperature Anomaly (C)")
)

main = curve.relabel("North Frigid Zone").opts(width=800, labelled=["y"], 
                                                 tools=["pan", "zoom_in", "hover", "reset"])
range_finder = curve.opts(width=800, height=100, yaxis=None, default_tools=[])
line = holoviews.HLine(0)
RangeToolLink(range_finder, main)

layout = (main * line + range_finder).cols(1)
layout = layout.opts(
    opts.Layout(shared_axes=False, merge_tools=False),
    opts.HLine(color="black", alpha=0.2, line_width=2))
Embed(layout, "north_frigid_zone")()
#+end_src

#+RESULTS:
#+begin_export html
<script src="north_frigid_zone.js" id="2526d4db-874a-452a-8f09-759ff2c35724"></script>
#+end_export

* All Zones Dropdown
#+begin_src ipython :session giss :results output raw :exports both
# the Tools
hover = HoverTool(
tooltips = [
    ("Year", "@Year"),
    ("Difference from Normal", "@difference_from_normal"),
],
    formatters={"Difference From Normal": "numeral"},
    mode="vline",
)

plot = giss_tidy.hvplot("Year", groupby="location", width=Plots.width, dynamic=False, tools=[hover])
line = holoviews.HLine(0)
layout = plot * line
file_name = "zones.html"

plot_file = OUTPUT_PATH.joinpath(file_name)
holoviews.save(layout, plot_file)
print("[[file:{}][Link To Plot]]".format(file_name))
#+end_src

#+RESULTS:
[[file:zones.html][Link To Plot]]

* All Zones Overlay
#+begin_src ipython :session giss :results output raw :exports both
plot = giss_tidy.hvplot("Year", "Difference From Normal", 
                        by="location", 
                        title="Difference by Zone", width=Plots.width, height=Plots.height)
line = holoviews.HLine(0)
layout = plot * line
Embed(layout, "all_zones")()
#+end_src

#+RESULTS:
#+begin_export html
<script src="all_zones.js" id="20069467-9d42-4808-bc8f-834c819d2e88"></script>
#+end_export

* Hemispheres
#+begin_src ipython :session giss :results output raw :exports both
hemispheres = ["Global", "Northern Hemisphere", "Southern Hemisphere"]
hemispheres = giss_tidy[giss_tidy.location.isin(hemispheres)]
plot = hemispheres.hvplot("Year", "Difference From Normal", by="location", 
                          title="Difference by Hemisphere", 
                          width=Plots.width, height=Plots.height)
line = holoviews.HLine(0)
layout = plot * line
Embed(layout, "hemispheres")()
#+end_src

#+RESULTS:
#+begin_export html
<script src="hemispheres.js" id="2cf942bc-0e00-4be5-a72b-fb76e34559c9"></script>
#+end_export

* Extratropics
#+begin_src ipython :session giss :results output raw :exports both
zones = ["Global", "Northern Extratropics", "Southern Extratropics", "Tropics"]
zones = giss_tidy[giss_tidy.location.isin(zones)]
plot = zones.hvplot("Year", "Difference From Normal", by="location", 
                    title="Tropics and Extratropics", 
                    width=Plots.width, height=Plots.height)
line = holoviews.HLine(0)
layout = plot * line
Embed(layout, "tropics")()
#+end_src

#+RESULTS:
#+begin_export html
<script src="tropics.js" id="0e434fbb-549f-4f60-a187-d6be4e8a97b7"></script>
#+end_export

* The Zones
#+begin_src ipython :session giss :results output raw :exports both
zones = ["North Frigid", "North Temperate", "North Sub-Tropic", 
         "Tropic of Cancer", "Tropic of Capricorn",
         "South Frigid", "South Temperate", "South Sub-Tropic"]
zones =  giss_tidy[giss_tidy.location.isin(zones)]
plot = zones.hvplot("Year", "Difference From Normal", by="location", 
                    title="Difference By Zone", 
                    width=Plots.width, height=Plots.height)
line = holoviews.HLine(0)
layout = plot * line
Embed(layout, "zones")()
#+end_src

#+RESULTS:
#+begin_export html
<script src="zones.js" id="1de210ff-8758-4475-856b-f8a21f75fef4"></script>
#+end_export

* Separate Zones
#+begin_src ipython :session giss :results none
location_map = {
    "Global": "Hemispheres",
    "Northern Hemisphere": "Hemispheres",
    "Southern Hemisphere": "Hemispheres",
    "Northern Extratropics": "Tropical", 
    'Tropics': "Tropical", 
    'Southern Extratropics': "Tropical",
    'North Frigid': "Zones", 
    'North Temperate': "Zones", 
    'North Sub-Tropic': "Zones",
    'Tropic of Cancer': "Zones", 
    'Tropic of Capricorn': "Zones", 
    'South Sub-Tropic': "Zones",
    'South Temperate': "Zones", 
    'South Frigid': "Zones",
}
giss_tidy["category"] = giss_tidy.location.map(location_map)
#+end_src

#+begin_src ipython :session giss :results output raw :exports both
giss_tidy = giss_tidy.rename(columns={"Difference From Normal": "difference_from_normal"})
hover = HoverTool(
tooltips = [
    ("Year", "@Year"),
    ("Difference from Normal", "@difference_from_normal"),
    ("Location", "@location")
],
    formatters={"difference_from_normal": "numeral"},
    mode="vline",
)

plot = giss_tidy.hvplot("Year", "difference_from_normal",
                        by="location",
                        groupby="category",
                        width=Plots.width, 
                        dynamic=False, 
                        tools=[hover])
line = holoviews.HLine(0)
layout = plot * line

file_name = "category_zones.html"

plot_file = OUTPUT_PATH.joinpath(file_name)
holoviews.save(layout, plot_file)
print("[[file:{}][Link To Plot]]".format(file_name))
#+end_src

#+RESULTS:
[[file:category_zones.html][Link To Plot]]
