<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visions, Voices, Data (Posts about networkx)</title><link>https://necromuralist.github.io/Visions-Voices-Data/</link><description></description><atom:link href="https://necromuralist.github.io/Visions-Voices-Data/categories/networkx.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Sat, 13 Apr 2019 18:26:42 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Some Networkx Examples</title><link>https://necromuralist.github.io/Visions-Voices-Data/posts/networks/some-networkx-examples/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/some-networkx-examples/#org87f7995"&gt;The Departure&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/some-networkx-examples/#org14675b2"&gt;Imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/some-networkx-examples/#orgc5bc91b"&gt;Set Up&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/some-networkx-examples/#orgea00c44"&gt;The Initiation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/some-networkx-examples/#org89e016d"&gt;Different Ways to Create Network Graphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/some-networkx-examples/#org463b0af"&gt;A Chess Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/some-networkx-examples/#orgc3bb999"&gt;The Return&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org87f7995" class="outline-2"&gt;
&lt;h2 id="org87f7995"&gt;The Departure&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org87f7995"&gt;
&lt;p&gt;
This is a look at different ways of creating and manipulating graphs using &lt;a href="https://networkx.github.io"&gt;NetworkX&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org14675b2" class="outline-3"&gt;
&lt;h3 id="org14675b2"&gt;Imports&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org14675b2"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbdcbb4a" class="outline-4"&gt;
&lt;h4 id="orgbdcbb4a"&gt;Python&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgbdcbb4a"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from functools import partial
from pathlib import Path
import os
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org56144b4" class="outline-4"&gt;
&lt;h4 id="org56144b4"&gt;PyPi&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org56144b4"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from bokeh.models import HoverTool
import holoviews
import hvplot.pandas
import networkx
import numpy
import pandas
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfb165c9" class="outline-4"&gt;
&lt;h4 id="orgfb165c9"&gt;My Stuff&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgfb165c9"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from graeae.visualization import EmbedHoloview
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc5bc91b" class="outline-3"&gt;
&lt;h3 id="orgc5bc91b"&gt;Set Up&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgc5bc91b"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SLUG = "some-networkx-examples"
OUTPUT_PATH = Path("../../files/posts/networks/" + SLUG)
Embed = partial(EmbedHoloview, folder_path=OUTPUT_PATH)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgea00c44" class="outline-2"&gt;
&lt;h2 id="orgea00c44"&gt;The Initiation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgea00c44"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org89e016d" class="outline-3"&gt;
&lt;h3 id="org89e016d"&gt;Different Ways to Create Network Graphs&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org89e016d"&gt;
&lt;p&gt;
&lt;b&gt;NetworkX&lt;/b&gt; has a few different ways to create graphs, some more flexible than others. This is a non-exhaustive showing of some of them.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org80f975a" class="outline-4"&gt;
&lt;h4 id="org80f975a"&gt;Adding Edges To An Existing Graph&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org80f975a"&gt;
&lt;p&gt;
You can create a graph using the graph constructors. This is an example of an undirected &lt;a href="https://networkx.github.io/documentation/stable/reference/classes/graph.html"&gt;Graph&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;graph_1 = networkx.Graph()
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;G1.add_edges_from([(0, 1),
		   (0, 2),
		   (0, 3),
		   (0, 5),
		   (1, 3),
		   (1, 6),
		   (3, 4),
		   (4, 5),
		   (4, 7),
		   (5, 8),
		   (8, 9)])

networkx.draw_networkx(G1)
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="file:///tmp/graph_one.png" alt="graph_one.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org105c70a" class="outline-4"&gt;
&lt;h4 id="org105c70a"&gt;Adjacency List&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org105c70a"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open("G_adjlist.txt") as reader:
    print(reader.read())
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;G2 = networkx.read_adjlist('G_adjlist.txt', nodetype=int)
G2.edges()
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org71b7368" class="outline-4"&gt;
&lt;h4 id="org71b7368"&gt;Adjacency Matrix&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org71b7368"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;G_mat = numpy.array([[0, 1, 1, 1, 0, 1, 0, 0, 0, 0],
		     [1, 0, 0, 1, 0, 0, 1, 0, 0, 0],
		     [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
		     [1, 1, 0, 0, 1, 0, 0, 0, 0, 0],
		     [0, 0, 0, 1, 0, 1, 0, 1, 0, 0],
		     [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
		     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
		     [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
		     [0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
		     [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]])
G_mat
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;G3 = networkx.Graph(G_mat)
G3.edges()
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6d639c7" class="outline-4"&gt;
&lt;h4 id="org6d639c7"&gt;Edgelist&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6d639c7"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open('G_edgelist.txt') as reader:
    print(reader.read())
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;G4 = networkx.read_edgelist('G_edgelist.txt', data=[('Weight', int)])

G4.edges(data=True)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6ded988" class="outline-4"&gt;
&lt;h4 id="org6ded988"&gt;Pandas DataFrame&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6ded988"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;G_df = pandas.read_csv('G_edgelist.txt', delim_whitespace=True, 
		       header=None, names=['n1', 'n2', 'weight'])
G_df
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;G5 = networkx.from_pandas_dataframe(G_df, 'n1', 'n2', edge_attr='weight')
G5.edges(data=True)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org463b0af" class="outline-3"&gt;
&lt;h3 id="org463b0af"&gt;A Chess Example&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org463b0af"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;with open('chess_graph.txt') as reader:
    count = 0
    for line in reader:
	print(line.strip())
	count += 1
	if count == 5:
	    break
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chess = networkx.read_edgelist('chess_graph.txt', data=[('outcome', int), ('timestamp', float)], 
			 create_using=networkx.MultiDiGraph())
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chess.is_directed(), chess.is_multigraph()
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chess.edges(data=True)[:5]
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;games_played = chess.degree()
games_played
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;max_value = max(games_played.values())
max_key, = [i for i in games_played.keys() if games_played[i] == max_value]

print('player {}\n{} games'.format(max_key, max_value))
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;df = pd.DataFrame(chess.edges(data=True), columns=['white', 'black', 'outcome'])
df.head()
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;df['outcome'] = df['outcome'].map(lambda x: x['outcome'])
df.head()
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;won_as_white = df[df['outcome']==1].groupby('white').sum()
won_as_black = df[df['outcome']==-1].groupby('black').sum()
win_count = won_as_white.add(won_as_black, fill_value=0)
print(win_count.head())
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;win_count.nlargest(5, 'outcome')
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc3bb999" class="outline-2"&gt;
&lt;h2 id="orgc3bb999"&gt;The Return&lt;/h2&gt;
&lt;/div&gt;</description><category>networks</category><category>networkx</category><guid>https://necromuralist.github.io/Visions-Voices-Data/posts/networks/some-networkx-examples/</guid><pubDate>Fri, 12 Apr 2019 20:12:58 GMT</pubDate></item><item><title>Company Movie Night</title><link>https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/#org2bc9d7e"&gt;The Departure&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/#org23b5893"&gt;Imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/#orgb5dd9c8"&gt;Set Up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/#org3d59bef"&gt;The Plotting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/#orgca2c334"&gt;The Initiation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/#org682623f"&gt;The Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/#org9acb9d3"&gt;Plot Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/#org80c0970"&gt;The Employee Movie Choices Graph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/#org73e9f2c"&gt;Question 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/#org4934d2c"&gt;Question 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/#orgf0d4a96"&gt;Question 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/#orgb72da45"&gt;The Return&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2bc9d7e" class="outline-2"&gt;
&lt;h2 id="org2bc9d7e"&gt;The Departure&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2bc9d7e"&gt;
&lt;p&gt;
This is a look at working with networks using &lt;a href="https://networkx.github.io"&gt;networkx&lt;/a&gt;. Our scene - eight employees are trying to choose three movies to watch. We have two sources of data - the candidate movies and the &lt;i&gt;relationship&lt;/i&gt; between pairs of employees. The relationships are on a scale from -100 to 100, with -100 being the strongest of enemies and 100 meaning they are best of friends. Zero either means they have no relationship (don't interact) or are indifferent about the other person.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org23b5893" class="outline-3"&gt;
&lt;h3 id="org23b5893"&gt;Imports&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org23b5893"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc8c8630" class="outline-4"&gt;
&lt;h4 id="orgc8c8630"&gt;From Python&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgc8c8630"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from functools import partial
from pathlib import Path
import os
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org561316d" class="outline-4"&gt;
&lt;h4 id="org561316d"&gt;From PyPi&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org561316d"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from dotenv import load_dotenv
from bokeh.models import HoverTool
import holoviews
import hvplot.pandas
import networkx
import pandas
import numpy
from networkx.algorithms import bipartite
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7479a5f" class="outline-4"&gt;
&lt;h4 id="org7479a5f"&gt;My Stuff&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7479a5f"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from graeae.visualization import EmbedHoloview
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb5dd9c8" class="outline-3"&gt;
&lt;h3 id="orgb5dd9c8"&gt;Set Up&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb5dd9c8"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd00db63" class="outline-4"&gt;
&lt;h4 id="orgd00db63"&gt;Load Dotenv&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd00db63"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;load_dotenv(".env", override=True)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3d59bef" class="outline-3"&gt;
&lt;h3 id="org3d59bef"&gt;The Plotting&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org3d59bef"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SLUG = 'company-movie-night'
OUTPUT = Path("../../files/posts/networks/" + SLUG)
Embed = partial(EmbedHoloview, folder_path=OUTPUT)
holoviews.extension("bokeh")
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgca2c334" class="outline-2"&gt;
&lt;h2 id="orgca2c334"&gt;The Initiation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgca2c334"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org682623f" class="outline-3"&gt;
&lt;h3 id="org682623f"&gt;The Data&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org682623f"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbc5dc1e" class="outline-4"&gt;
&lt;h4 id="orgbc5dc1e"&gt;This Is the Set Of Employee-Relationships&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgbc5dc1e"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;employee_relationships_path = Path(os.environ.get("EMPLOYEE_RELATIONSHIPS"))
relationships_data = pandas.read_csv(
    employee_relationships_path, 
    delimiter="\t", 
    header=None,
    names="employee_1 employee_2 relationship".split())
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;table = holoviews.Table(relationships_data)
Embed(plot=table, file_name="relationships_data")()
&lt;/pre&gt;&lt;/div&gt;

&lt;object type="text/html" data="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/relationships_data.html" style="width:100%" height="800"&gt;
  &lt;p&gt;Figure Missing&lt;/p&gt;
&lt;/object&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;employees = set(relationships_data.employee_1.unique()) | set(relationships_data.employee_2.unique())
print(employees)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
{'Claude', 'Pablo', 'Lee', 'Andy', 'Vincent', 'Joan', 'Frida', 'Georgia'}

&lt;/pre&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(len(employees))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
8

&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(len(relationships_data))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
28

&lt;/pre&gt;

&lt;p&gt;
We have eight employees and twenty-eight links. Is this a fully connected graph? The handshake problem says that the amount of links in a fully-connected network is:
&lt;/p&gt;

&lt;p&gt;
\[
 links = \frac{n(n-1)}{2}
\]
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(len(employees) * (len(employees) - 1)/2)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
28.0

&lt;/pre&gt;

&lt;p&gt;
It looks like our relationships data creates a fully-connected network (unless there is a duplicate which would be an error).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org05df5ff" class="outline-4"&gt;
&lt;h4 id="org05df5ff"&gt;This Is the Movie Choices&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org05df5ff"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;employee_movies_path = Path(os.environ.get("EMPLOYEE_MOVIE_CHOICES"))
movies_data = pandas.read_csv(
    employee_movies_path, 
    delimiter="\t", 
    header=None,
    skiprows=1,
    names="employee movie".split())
print(movies_data.head())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
  employee                            movie
0     Andy                         Anaconda
1     Andy                       Mean Girls
2     Andy                       The Matrix
3   Claude                         Anaconda
4   Claude  Monty Python and the Holy Grail

&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;movies = set(movies_data.movie.unique())
print(movies)
print(len(movies))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The eight employees chose 11 movies between them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org9acb9d3" class="outline-3"&gt;
&lt;h3 id="org9acb9d3"&gt;Plot Graph&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9acb9d3"&gt;
&lt;p&gt;
You can use the following function to plot graphs.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def plot_graph(graph, file_name, plot_title, weight_name=None, directed=False):
    """Plots an interactive graph using the spring-layout

    Args:
     graph: a networkx graph
     file_name: name to store the plot (without extension)
     plot_title: name to give the plot
     weight_name: name of the attribute for plotting edge weights (if G is weighted)
     directed: whether it is a directed graph
    """
    plot = holoviews.Graph.from_networkx(graph,
					 networkx.spring_layout).opts(
					     cmap="Set1",                                             
					     fontsize=Plot.fontsize,
					     width=Plot.width,
					     height=Plot.height,
					     edge_line_color=Plot.edge_color,
					     title=plot_title,
					     xaxis=None, yaxis=None, directed=directed)
    Embed(plot=plot, file_name=file_name)()
    return
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org80c0970" class="outline-3"&gt;
&lt;h3 id="org80c0970"&gt;The Employee Movie Choices Graph&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org80c0970"&gt;
&lt;p&gt;
The employee-movie network consists of employees and movies as nodes and the edges indicate an employee chose a movie. Not every movie is chosen by every employee, so it isn't a complete graph.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;expected_edges = len(movies_data)
expected_nodes = len(employees) + len(movies)
print("Expected Edges: {}".format(expected_edges))
print("Expected Nodes: {}".format(expected_nodes))
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Expected Edges: 24
Expected Nodes: 19

&lt;/pre&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;plot = holoviews.Graph.from_networkx(friendship_graph,
				     networkx.circular_layout).opts(
					 node_color=dim("gender"), cmap="Set1",
					 tools=[hover],
					 fontsize=Plot.fontsize,
					 width=800,
					 height=800,
					 edge_line_color=Plot.edge_color,
					 title="Friendship Network by Gender",
					 xaxis=None, yaxis=None, directed=True)
Embed(plot=plot, file_name="employee_movie_choices_plot")()
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def answer_one():
    """Loads the Employee Movie Choices

    Returns:
     Graph: graph with movie and employees as nodes
    """
    movie_choices = pandas.read_table('Employee_Movie_Choices.txt')
    movie_choices = networkx.from_pandas_dataframe(movie_choices, "#Employee", "Movie")
    return movie_choices
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;movie_choices = answer_one()
edges = movie_choices.edges()
assert len(edges) == 24
assert len(movie_choices.nodes()) == 19
assert networkx.is_bipartite(movie_choices)
positions = networkx.spring_layout(movie_choices)

networkx.draw_networkx(movie_choices, positions, edges=edges)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org73e9f2c" class="outline-3"&gt;
&lt;h3 id="org73e9f2c"&gt;Question 2&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org73e9f2c"&gt;
&lt;p&gt;
Using the graph from the previous question, add nodes attributes named `'type'` where movies have the value `'movie'` and employees have the value `'employee'` and return that graph.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;This function should return a networkx graph with node attributes `{'type': 'movie'}` or `{'type': 'employee'}`&lt;/b&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def answer_two():
    """Adds 'type' to nodes from movie-graph

    Returns:
     Graph: answer_one with 'type' attribute added (employee or movie)
    """
    graph = answer_one()
    new_graph = networkx.Graph()
    nodes = graph.nodes()
    employee_nodes = [node for node in nodes if node in employees]
    movie_nodes = [node for node in nodes if node in movies]
    new_graph.add_nodes_from(employee_nodes, bipartite=0, type='employee')
    new_graph.add_nodes_from(movie_nodes, bipartite=1, type="movie")
    new_graph.add_edges_from(graph.edges())
    return new_graph
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;two = answer_two()
two.nodes(data=True)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;plot_graph(two)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4934d2c" class="outline-3"&gt;
&lt;h3 id="org4934d2c"&gt;Question 3&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4934d2c"&gt;
&lt;p&gt;
Find a weighted projection of the graph from `answer&lt;sub&gt;two&lt;/sub&gt;` which tells us how many movies different pairs of employees have in common.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;This function should return a weighted projected graph.&lt;/b&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def answer_three():
    graph = answer_two()
    assert networkx.is_bipartite(graph)
    return bipartite.weighted_projected_graph(graph, employees)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;three = answer_three()
plot_graph(three)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf0d4a96" class="outline-3"&gt;
&lt;h3 id="orgf0d4a96"&gt;Question 4&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf0d4a96"&gt;
&lt;p&gt;
Suppose you'd like to find out if people that have a high relationship score also like the same types of movies.
&lt;/p&gt;

&lt;p&gt;
Find the Pearson correlation ( using `DataFrame.corr()` ) between employee relationship scores and the number of movies they have in common. If two employees have no movies in common it should be treated as a 0, not a missing value, and should be included in the correlation calculation.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;This function should return a float.&lt;/b&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def answer_four():
    """calculates the pearson correlation for data

    Returns:
     float: Pearson correlation for weight and relationship_score
    """
    three = answer_three()
    relationships = pandas.read_table(
	"Employee_Relationships.txt",
	names="employee_left employee_right relationship_score".split())
    relationships["employees"] = relationships.apply(
	lambda row: tuple(sorted((row["employee_left"],
				  row['employee_right']))), axis=1)

    weights = pandas.DataFrame(
	three.edges(data=True),
	columns="employee_left employee_right weight".split())
    weights["weight"] = weights.weight.map(lambda row: row["weight"])
    weights["employees"] = weights.apply(lambda row: tuple(sorted(
	(row["employee_left"],
	 row["employee_right"]))),
					 axis=1)

    joined = pandas.merge(relationships, weights, how="outer", 
			  on=['employees'])
    assert len(joined) == len(relationships)
    joined['weight'] = joined["weight"].fillna(0)

    data = joined[["relationship_score", "weight"]]
    correlation = data.corr()
    return correlation.relationship_score.weight
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(answer_four())
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb72da45" class="outline-2"&gt;
&lt;h2 id="orgb72da45"&gt;The Return&lt;/h2&gt;
&lt;/div&gt;</description><category>networks</category><category>networkx</category><guid>https://necromuralist.github.io/Visions-Voices-Data/posts/networks/company-moving-night/</guid><pubDate>Thu, 11 Apr 2019 20:04:23 GMT</pubDate></item></channel></rss>