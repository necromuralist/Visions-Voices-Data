<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visions, Voices, Data (Posts about centrality)</title><link>https://necromuralist.github.io/Visions-Voices-Data/</link><description></description><atom:link href="https://necromuralist.github.io/Visions-Voices-Data/categories/centrality.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Mon, 15 Apr 2019 17:37:52 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Friends and Politics</title><link>https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/#org98e6c3c"&gt;Part 1 - Friendships&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/#org018afc4"&gt;Imports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/#org732ccfd"&gt;Friendships data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/#orgf25f1e3"&gt;Degree, Closeness, and Normalized Betweenness Centrality&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/#org4768f6e"&gt;Most Connected Friend&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/#org30c7f27"&gt;Fewest Hops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/#org8bd5234"&gt;Most Important Connection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/#orgdc438ba"&gt;Part 2 - Political Blogs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/#org0ea3edb"&gt;Scaled Page Rank of &lt;i&gt;realclearpolitics.com&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/#org8bd71a4"&gt;Top Five Blogs by Page Rank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/#org207f51f"&gt;HITS Score for Real Clear Politics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/#orga5d2d87"&gt;Top 5 Blogs by Hub Score&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/#orga24c551"&gt;Top Five Blogs By Authority&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;a href="https://en.wikipedia.org/wiki/Centrality"&gt;Node Centrality&lt;/a&gt; is a measure of the importance of a node to a network. This will explore measures of centrality using two networks, a friendship network, and a blog network.
&lt;/p&gt;

&lt;div id="outline-container-org98e6c3c" class="outline-2"&gt;
&lt;h2 id="org98e6c3c"&gt;Part 1 - Friendships&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org98e6c3c"&gt;
&lt;p&gt;
This will look at a network of friendships at a university department. Each node corresponds to a person (identified by an integer node label), and an edge indicates friendship. 
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-org018afc4" class="outline-3"&gt;
&lt;h3 id="org018afc4"&gt;Imports&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org018afc4"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;import networkx
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org732ccfd" class="outline-3"&gt;
&lt;h3 id="org732ccfd"&gt;Friendships data&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org732ccfd"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;friendships = networkx.read_gml('friendships.gml')
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(len(friendships))
print(networkx.is_connected(friendships))
print(networkx.is_directed(friendships))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
There are 1,133 people in the friendship network, which is a connected, undirected graph.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf25f1e3" class="outline-3"&gt;
&lt;h3 id="orgf25f1e3"&gt;Degree, Closeness, and Normalized Betweenness Centrality&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf25f1e3"&gt;
&lt;p&gt;
Find the degree centrality, closeness centrality, and normalized betweenness centrality (excluding endpoints) of node 100.
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Centrality#Degree_centrality"&gt;Degree Centrality&lt;/a&gt; scores the nodes based on the number of links they have to other nose. The assumption is that a node with more connections should be more important.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Closeness_centrality"&gt;Closeness Centrality&lt;/a&gt; uses the lengths of shortest paths to decide importance. The less distance there is between a node and the other nodes the more important it is.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Betweenness_centrality"&gt;Betweenness Centrality&lt;/a&gt; counts the number of shortest paths between pairs of nodes that pass through a node.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEGREE_CENTRALITY = networkx.degree_centrality(friendships)
CLOSENESS_CENTRALITY = networkx.closeness_centrality(friendships)
BETWEENNESS_CENTRALITY = networkx.betweenness_centrality(friendships)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def node_centrality(node=100):
    """gets measures of centrality for node

    Args:
     node (int): the number (key) for the node

    Returns:
     tuple: 
      - float: degree centrality
      - float: closeness centrality
      - float: normalized betweeness centrality
    """
    return (DEGREE_CENTRALITY[node],
	    CLOSENESS_CENTRALITY[node], BETWEENNESS_CENTRALITY[node])
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print("Node 101:")
degree, closeness, betweenness = node_centrality()
print("Degree Centrality: {0:.4f}".format(degree))
print("Closeness Centrality: {0:.2f}".format(closeness))
print("Normalized Betweenness Centrality: {0:.6f}".format(betweenness))
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def largest_node(centrality):
    """gets the node with the best (largest) score

    Args:
     centrality (dict): one of the centrality score dicts

    Returns:
     int: name of the node with the best score
    """
    return list(
	reversed(sorted((value, node)
			for (node, value) in centrality.items())))[0][1]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4768f6e" class="outline-3"&gt;
&lt;h3 id="org4768f6e"&gt;Most Connected Friend&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4768f6e"&gt;
&lt;p&gt;
We want to contact one person in our friendship network and have him or her contact all his or her immediate friends. To have the greatest impact, this person should have the most links in the network. Which node is this?
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def most_connected_friend():
    """returns the node with the best degree centrality"""
    return largest_node(DEGREE_CENTRALITY)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MOST_CONNECTED = most_connected_friend()
print("Most Connected Friend: {}".format(MOST_CONNECTED))
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;connected = networkx.Graph()
friends = friendships[MOST_CONNECTED]
for friend in friends:
    connected.add_edge(MOST_CONNECTED, friend)
positions = networkx.spring_layout(connected)
networkx.draw(connected, positions, with_labels=False, node_color='b', node_size=50)
networkx.draw(connected, positions, nodelist=[MOST_CONNECTED], node_color="r")
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Node 105 does appear to be well connected.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org30c7f27" class="outline-3"&gt;
&lt;h3 id="org30c7f27"&gt;Fewest Hops&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org30c7f27"&gt;
&lt;p&gt;
We want to reach everyone in the network by having one person passing messages to his friends who can then pass it on and so forth (a six-degrees of separation type scenario) but we want the fewest number of transfers. &lt;i&gt;Which friend is closest to all the people in the friendship network?&lt;/i&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def closest_friend():
    """the node with the best closeness centrality

    Returns:
     int: Identifier for the node closest to all the other nodes
    """
    return largest_node(CLOSENESS_CENTRALITY)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CLOSEST_FRIEND = closest_friend()
print("Closest Friend: {}".format(CLOSEST_FRIEND))
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;positions = networkx.spring_layout(friendships)
networkx.draw(friendships, positions, node_size=1, alpha=0.25, node_color='b')
networkx.draw_networkx_nodes(friendships, positions, nodelist=[CLOSEST_FRIEND],
			     node_color='r', node_size=50)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Interesting to look at, if not the most informative.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8bd5234" class="outline-3"&gt;
&lt;h3 id="org8bd5234"&gt;Most Important Connection&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8bd5234"&gt;
&lt;p&gt;
Although the graph is connected, if you took out one persion from the network, which one would cause the most disruption (which person is in the path of the most shortest paths)?
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def betweenness_centrality():
    """the node with the highest betweenness centrality

    Returns:
     int: ID of the person who sits on the most shortest paths
    """
    return largest_node(BETWEENNESS_CENTRALITY)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MOST_BETWEEN = betweenness_centrality()
print("Most Between Friend: {}".format(MOST_BETWEEN))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdc438ba" class="outline-2"&gt;
&lt;h2 id="orgdc438ba"&gt;Part 2 - Political Blogs&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgdc438ba"&gt;
&lt;p&gt;
Now we're going to use &lt;a href="https://en.wikipedia.org/wiki/PageRank"&gt;PageRank&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/HITS_algorithm"&gt;Hyperlink-Induced Topic Search (HITS)&lt;/a&gt;  to look at a directed network of political blogs, where nodes correspond to a blog and edges correspond to links between blogs.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blogs = networkx.read_gml('blogs.gml')
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(len(blogs))
print(networkx.is_directed(blogs))
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;networkx.draw(blogs, alpha=0.5, node_size=1, node_color='r')
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0ea3edb" class="outline-3"&gt;
&lt;h3 id="org0ea3edb"&gt;Scaled Page Rank of &lt;i&gt;realclearpolitics.com&lt;/i&gt;&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org0ea3edb"&gt;
&lt;p&gt;
&lt;i&gt;PageRank&lt;/i&gt; scores web-pages by the number of important nodes that link directly to them. It is possible for the algorithm to get stuck if there are no edges leading out from a directed subgraph, producing erroneous page-ranks so the &lt;i&gt;Scaled Page Rank&lt;/i&gt; uses a random-restart do decide when to occasionally jump to a new node, an idea similar to the way Stochastic Gradient Descent avoids being stuck in local minima. The &lt;a href="https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.algorithms.link_analysis.pagerank_alg.pagerank.html"&gt;Networkx pagerank&lt;/a&gt; uses a default of 0.85, which I will use, so it will do a random-restart about 15% of the time.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PAGE_RANK = networkx.pagerank(blogs)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def real_clear_politics_page_rank():
    """Page Rank of realclearpolitics.com

    Returns:
     float: The PageRank for the realclearpolitics blog.
    """
    return PAGE_RANK['realclearpolitics.com']
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print("Real Clear Politics Page Rank: {0:.4f}".format(real_clear_politics_page_rank()))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8bd71a4" class="outline-3"&gt;
&lt;h3 id="org8bd71a4"&gt;Top Five Blogs by Page Rank&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8bd71a4"&gt;
&lt;p&gt;
This time the PageRank scores will be used to find what it thinks are the most important blogs.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def top_five(ranks, count=5):
    """gets the top-five blogs by rank

    Args:
     count (int): number to return

    Returns:
     list [str]: names of the top blogs - most to least important
    """
    top = list(reversed(sorted((rank, node)
			       for node, rank in ranks.items())))[:count]
    return [node for rank, node in top]
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def top_five_page_rank():
    """Top 5 nodes by page rank

    Returns:
     list [str]: top-five blogs by page-rank
    """
    return top_five(PAGE_RANK)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print("Top Five Blogs by PageRank")

for blog in top_five_page_rank():
    print("  - {}".format(blog))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org207f51f" class="outline-3"&gt;
&lt;h3 id="org207f51f"&gt;HITS Score for Real Clear Politics&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org207f51f"&gt;
&lt;p&gt;
This uses the HITS algorithm to find the authority and hub scores for &lt;i&gt;realclearpolitics.com&lt;/i&gt;. This algorithm tries to identify &lt;code&gt;hubs&lt;/code&gt;, collections of links that directed users to important pages, and &lt;code&gt;authoratative&lt;/code&gt; pages, pages that are deemed important because of their relevant content (as identified by the fact that they are linked to by &lt;code&gt;hubs&lt;/code&gt;).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;HUBS, AUTHORITIES = networkx.hits(blogs)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def real_clear_politics_hits():
    """HITS score for realclearpolitics.com

    Returns:
     tuple (float, float): hub score, authority score
    """
    return HUBS['realclearpolitics.com'], AUTHORITIES['realclearpolitics.com']
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;hub, authority = real_clear_politics_hits()
print("Real Clear Politics")
print("Hub: {0:.5f}\nAuthority: {0:.5f}".format(hub, authority))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga5d2d87" class="outline-3"&gt;
&lt;h3 id="orga5d2d87"&gt;Top 5 Blogs by Hub Score&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga5d2d87"&gt;
&lt;p&gt;
This will find the top five blogs based on their hub scores (meaning they are the ones who link to the most authoratative sites).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def top_five_hubs():
    """Top five blogs by hub scores

    Returns:
     list (str): Names of top-five hub blogs
    """
    return top_five(HUBS)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;top_five_hub_blogs = top_five_hubs()
print('Top Five Hub Blogs')
for blog in top_five_hub_blogs:
    print(" - {}".format(blog))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orga24c551" class="outline-3"&gt;
&lt;h3 id="orga24c551"&gt;Top Five Blogs By Authority&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orga24c551"&gt;
&lt;p&gt;
This will find the top five political blogs based on how many of the hub-blogs link to them.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def top_five_authorities():
    """the top 5 blogs by authorities score

    Returns:
     list (str): names of the most authoratative blogs
    """
    return top_five(AUTHORITIES)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print("Top Five Authoratative Blogs")
authoratative_blogs = top_five_authorities()
for blog in authoratative_blogs:
    print(" - {}".format(blog))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>centrality</category><category>networks</category><guid>https://necromuralist.github.io/Visions-Voices-Data/posts/networks/friends-and-politics/</guid><pubDate>Sat, 13 Apr 2019 18:40:48 GMT</pubDate></item></channel></rss>