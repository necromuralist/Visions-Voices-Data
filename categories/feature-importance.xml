<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visions, Voices, Data (Posts about feature importance)</title><link>https://necromuralist.github.io/Visions-Voices-Data/</link><description></description><atom:link href="https://necromuralist.github.io/Visions-Voices-Data/categories/feature-importance.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Thu, 06 Feb 2020 01:05:16 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Permutation Importance</title><link>https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#org4e10308"&gt;Beginning&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#org944c4b8"&gt;Imports&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#org7625a5f"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#orgf001945"&gt;PyPi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#orgde3f10e"&gt;Others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#orgaef4e50"&gt;Set Up&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#org0a8e4db"&gt;Plotting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#org08e1cea"&gt;The Environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#org84cc911"&gt;The Table Printer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#orgfc2f9d7"&gt;The Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#org78fa31c"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#orgd16a3f5"&gt;Looking at the Dataset&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#org0fd89f8"&gt;The Target&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#org1c96a7e"&gt;The Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#org1df2d09"&gt;Build and Train the Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#orgd79f9a3"&gt;Permutation Importance&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#org3b157c7"&gt;Plotting the Importance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/#orgc3cd38f"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4e10308" class="outline-2"&gt;
&lt;h2 id="org4e10308"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4e10308"&gt;
&lt;p&gt;
This is some notes on the kaggle tutorial on &lt;a href="https://www.kaggle.com/dansbecker/permutation-importance"&gt;Permutation Importance&lt;/a&gt;. &lt;i&gt;Permutation Importance&lt;/i&gt; is a form of feature selection where you ask - &lt;i&gt;If you randomly shuffle the values one column in the dataset and leave the others in place, how does this affect the performance of the model?&lt;/i&gt;. The idea is that if the column is important, then shuffling the values should make the model perform worse, so you can measure how much it degrades after you shuffle each column and figure out which columns are contributing to the model. Here's the rough process:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Start with a trained model and a labeled dataset.&lt;/li&gt;
&lt;li&gt;Shuffle a single column&lt;/li&gt;
&lt;li&gt;Measure how much worse the model does predicting the target.&lt;/li&gt;
&lt;li&gt;Restore the column and move on to the next column, repeating the steps until you have covered all the columns.&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div id="outline-container-org944c4b8" class="outline-3"&gt;
&lt;h3 id="org944c4b8"&gt;Imports&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org944c4b8"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7625a5f" class="outline-4"&gt;
&lt;h4 id="org7625a5f"&gt;Python&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org7625a5f"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from functools import partial
from pathlib import Path
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf001945" class="outline-4"&gt;
&lt;h4 id="orgf001945"&gt;PyPi&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf001945"&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org7439362"&gt;&lt;/a&gt;eli5&lt;br&gt;
&lt;div class="outline-text-5" id="text-org7439362"&gt;
&lt;p&gt;
&lt;a href="https://eli5.readthedocs.io/en/latest/"&gt;eli5&lt;/a&gt; (which is presumably short for &lt;a href="https://www.dictionary.com/e/slang/eli5/"&gt;explain it like I'm five&lt;/a&gt;) is a library to help with machine learning model debugging and visualization. You can read about the PermutationImportance class &lt;a href="https://eli5.readthedocs.io/en/latest/autodocs/sklearn.html#eli5.sklearn.permutation_importance.PermutationImportance"&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from eli5.sklearn import PermutationImportance
import eli5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orgf72ac86"&gt;&lt;/a&gt;sklearn&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgf72ac86"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from tabulate import tabulate
import hvplot.pandas
import numpy
import pandas
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgde3f10e" class="outline-4"&gt;
&lt;h4 id="orgde3f10e"&gt;Others&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgde3f10e"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;from graeae import CountPercentage, EmbedHoloviews, EnvironmentLoader
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgaef4e50" class="outline-3"&gt;
&lt;h3 id="orgaef4e50"&gt;Set Up&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgaef4e50"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0a8e4db" class="outline-4"&gt;
&lt;h4 id="org0a8e4db"&gt;Plotting&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0a8e4db"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SLUG = "permutation-importance"
PATH = Path("../../files/posts/tutorials/")/SLUG
Embed = partial(EmbedHoloviews, folder_path=PATH)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org08e1cea" class="outline-4"&gt;
&lt;h4 id="org08e1cea"&gt;The Environment&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org08e1cea"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ENVIRONMENT = EnvironmentLoader()
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org84cc911" class="outline-4"&gt;
&lt;h4 id="org84cc911"&gt;The Table Printer&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org84cc911"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TABLE = partial(tabulate, tablefmt="orgtbl", headers="keys", showindex=False)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfc2f9d7" class="outline-4"&gt;
&lt;h4 id="orgfc2f9d7"&gt;The Data&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgfc2f9d7"&gt;
&lt;p&gt;
The dataset here is the &lt;a href="https://www.kaggle.com/mathan/fifa-2018-match-statistics"&gt;Predict FIFA 2018 Man of the Match&lt;/a&gt; dataset from kaggle.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;path = Path(ENVIRONMENT["FIFA"]).expanduser()
data = pandas.read_csv(path)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org78fa31c" class="outline-2"&gt;
&lt;h2 id="org78fa31c"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org78fa31c"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd16a3f5" class="outline-3"&gt;
&lt;h3 id="orgd16a3f5"&gt;Looking at the Dataset&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd16a3f5"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(TABLE(data.sample().iloc[0].reset_index(), headers="Column Value".split()))
&lt;/pre&gt;&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Column&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Date&lt;/td&gt;
&lt;td class="org-right"&gt;17-06-2018&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Team&lt;/td&gt;
&lt;td class="org-right"&gt;Mexico&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Opponent&lt;/td&gt;
&lt;td class="org-right"&gt;Germany&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Goal Scored&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Ball Possession %&lt;/td&gt;
&lt;td class="org-right"&gt;40&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Attempts&lt;/td&gt;
&lt;td class="org-right"&gt;12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;On-Target&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Off-Target&lt;/td&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Blocked&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Corners&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Offsides&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Free Kicks&lt;/td&gt;
&lt;td class="org-right"&gt;11&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Saves&lt;/td&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Pass Accuracy %&lt;/td&gt;
&lt;td class="org-right"&gt;82&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Passes&lt;/td&gt;
&lt;td class="org-right"&gt;281&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Distance Covered (Kms)&lt;/td&gt;
&lt;td class="org-right"&gt;106&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Fouls Committed&lt;/td&gt;
&lt;td class="org-right"&gt;15&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Yellow Card&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Yellow &amp;amp; Red&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Red&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Man of the Match&lt;/td&gt;
&lt;td class="org-right"&gt;No&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;1st Goal&lt;/td&gt;
&lt;td class="org-right"&gt;35.0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Round&lt;/td&gt;
&lt;td class="org-right"&gt;Group Stage&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;PSO&lt;/td&gt;
&lt;td class="org-right"&gt;No&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Goals in PSO&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Own goals&lt;/td&gt;
&lt;td class="org-right"&gt;nan&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Own goal Time&lt;/td&gt;
&lt;td class="org-right"&gt;nan&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0fd89f8" class="outline-4"&gt;
&lt;h4 id="org0fd89f8"&gt;The Target&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org0fd89f8"&gt;
&lt;p&gt;
The target is "Man of the Match".
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CountPercentage(data["Man of the Match"])()
&lt;/pre&gt;&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Value&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Count&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Percent (%)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;No&lt;/td&gt;
&lt;td class="org-right"&gt;64&lt;/td&gt;
&lt;td class="org-right"&gt;50.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Yes&lt;/td&gt;
&lt;td class="org-right"&gt;64&lt;/td&gt;
&lt;td class="org-right"&gt;50.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Not a particularly large dataset, but we aren't really interested in it per-se but rather how to use permutation importance with it.
&lt;/p&gt;

&lt;p&gt;
We want it to be a True/False value rather than a string value so let's change it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;data.loc[:, "Man of the Match"] = data["Man of the Match"] == "Yes"
CountPercentage(data["Man of the Match"])()
&lt;/pre&gt;&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-right"&gt;

&lt;col class="org-right"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Value&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Count&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;Percent (%)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;True&lt;/td&gt;
&lt;td class="org-right"&gt;64&lt;/td&gt;
&lt;td class="org-right"&gt;50.00&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;False&lt;/td&gt;
&lt;td class="org-right"&gt;64&lt;/td&gt;
&lt;td class="org-right"&gt;50.00&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1c96a7e" class="outline-3"&gt;
&lt;h3 id="org1c96a7e"&gt;The Features&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1c96a7e"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print(data.info())
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;lt;class 'pandas.core.frame.DataFrame'&amp;gt;
RangeIndex: 128 entries, 0 to 127
Data columns (total 27 columns):
Date                      128 non-null object
Team                      128 non-null object
Opponent                  128 non-null object
Goal Scored               128 non-null int64
Ball Possession %         128 non-null int64
Attempts                  128 non-null int64
On-Target                 128 non-null int64
Off-Target                128 non-null int64
Blocked                   128 non-null int64
Corners                   128 non-null int64
Offsides                  128 non-null int64
Free Kicks                128 non-null int64
Saves                     128 non-null int64
Pass Accuracy %           128 non-null int64
Passes                    128 non-null int64
Distance Covered (Kms)    128 non-null int64
Fouls Committed           128 non-null int64
Yellow Card               128 non-null int64
Yellow &amp;amp; Red              128 non-null int64
Red                       128 non-null int64
Man of the Match          128 non-null bool
1st Goal                  94 non-null float64
Round                     128 non-null object
PSO                       128 non-null object
Goals in PSO              128 non-null int64
Own goals                 12 non-null float64
Own goal Time             12 non-null float64
dtypes: bool(1), float64(3), int64(18), object(5)
memory usage: 26.2+ KB
None
&lt;/pre&gt;

&lt;p&gt;
As you can see there's both numeric and non-numeric columns. For illustration purposes let's use just the integer columns.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;columns = [column for column in data.columns if data[column].dtype == numpy.int64]
for column in sorted(columns):
    print(f" * {column}")
X = data[columns]

x_train, x_validate, y_train, y_validate = train_test_split(
    X,
    data["Man of the Match"], random_state=1)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
* Attempts
* Ball Possession %
* Blocked
* Corners
* Distance Covered (Kms)
* Fouls Committed
* Free Kicks
* Goal Scored
* Goals in PSO
* Off-Target
* Offsides
* On-Target
* Pass Accuracy %
* Passes
* Red
* Saves
* Yellow &amp;amp; Red
* Yellow Card
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1df2d09" class="outline-3"&gt;
&lt;h3 id="org1df2d09"&gt;Build and Train the Model&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org1df2d09"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;model = RandomForestClassifier(n_estimators=100, random_state=0).fit(x_train, y_train)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd79f9a3" class="outline-3"&gt;
&lt;h3 id="orgd79f9a3"&gt;Permutation Importance&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd79f9a3"&gt;
&lt;p&gt;
As I noted previously, you can read about the &lt;code&gt;PermutationImportance&lt;/code&gt; class &lt;a href="https://eli5.readthedocs.io/en/latest/autodocs/sklearn.html#eli5.sklearn.permutation_importance.PermutationImportance"&gt;here&lt;/a&gt;. If you read the documentation you'll see that you don't have to pass it a prefit model, and in some cases you don't want to (if you're using a hyper-parameter-search pipeline, say).
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;permutor = PermutationImportance(model, random_state=1).fit(x_validate, y_validate)
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ipython_html = eli5.show_weights(permutor, feature_names=x_validate.columns.tolist())
table = pandas.read_html(ipython_html.data)[0]
print(TABLE(table))
&lt;/pre&gt;&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col class="org-left"&gt;

&lt;col class="org-left"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;Weight&lt;/th&gt;
&lt;th scope="col" class="org-left"&gt;Feature&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;0.1750  Â± 0.0848&lt;/td&gt;
&lt;td class="org-left"&gt;Goal Scored&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;0.0500  Â± 0.0637&lt;/td&gt;
&lt;td class="org-left"&gt;Distance Covered (Kms)&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;0.0437  Â± 0.0637&lt;/td&gt;
&lt;td class="org-left"&gt;Yellow Card&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;0.0187  Â± 0.0500&lt;/td&gt;
&lt;td class="org-left"&gt;Off-Target&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;0.0187  Â± 0.0637&lt;/td&gt;
&lt;td class="org-left"&gt;Free Kicks&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;0.0187  Â± 0.0637&lt;/td&gt;
&lt;td class="org-left"&gt;Fouls Committed&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;0.0125  Â± 0.0637&lt;/td&gt;
&lt;td class="org-left"&gt;Pass Accuracy %&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;0.0125  Â± 0.0306&lt;/td&gt;
&lt;td class="org-left"&gt;Blocked&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;0.0063  Â± 0.0612&lt;/td&gt;
&lt;td class="org-left"&gt;Saves&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;0.0063  Â± 0.0250&lt;/td&gt;
&lt;td class="org-left"&gt;Ball Possession %&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;0  Â± 0.0000&lt;/td&gt;
&lt;td class="org-left"&gt;Red&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;0  Â± 0.0000&lt;/td&gt;
&lt;td class="org-left"&gt;Yellow &amp;amp; Red&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;0.0000  Â± 0.0559&lt;/td&gt;
&lt;td class="org-left"&gt;On-Target&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;-0.0063  Â± 0.0729&lt;/td&gt;
&lt;td class="org-left"&gt;Offsides&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;-0.0063  Â± 0.0919&lt;/td&gt;
&lt;td class="org-left"&gt;Corners&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;-0.0063  Â± 0.0250&lt;/td&gt;
&lt;td class="org-left"&gt;Goals in PSO&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;-0.0187  Â± 0.0306&lt;/td&gt;
&lt;td class="org-left"&gt;Attempts&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;-0.0500  Â± 0.0637&lt;/td&gt;
&lt;td class="org-left"&gt;Passes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
The table is ranked from most important feature to least important (based on the accuracy after shuffling the column). Anything with 0 or less essenttially contributed nothing to the model. Although that doesn't mean that they might not be useful for more feature engineering.
&lt;/p&gt;

&lt;p&gt;
The data is for the team as a whole, not an individual, so the "Man of the Match" column is telling you if any player on the team was awarded the "Budweiser Man of the Match".
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3b157c7" class="outline-4"&gt;
&lt;h4 id="org3b157c7"&gt;Plotting the Importance&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3b157c7"&gt;
&lt;p&gt;
The numbers are okay, but let's take a look at a plot of the weights.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;weights = table.Weight.str.split(expand=True)[0].astype(float)
table["weights"] = weights
plot = table.hvplot.bar(x="Feature", y="weights").opts(
    title="Permutation Importance (by Accuracy)",
    width=1000, height=800, xrotation=45)
Embed(plot=plot, file_name="permutation_importance")()
&lt;/pre&gt;&lt;/div&gt;

&lt;object type="text/html" data="https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/permutation_importance.html" style="width:100%" height="800"&gt;
  &lt;p&gt;Figure Missing&lt;/p&gt;
&lt;/object&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgc3cd38f" class="outline-2"&gt;
&lt;h2 id="orgc3cd38f"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc3cd38f"&gt;
&lt;p&gt;
So that's a quick look at getting a sense of the importance of a feature using &lt;code&gt;eli5&lt;/code&gt; and permutation importance. There's a more in depth look at it on their site, but next is another look at it with a different data set.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>feature importance</category><category>kaggle</category><category>tutorial</category><guid>https://necromuralist.github.io/Visions-Voices-Data/posts/tutorials/permutation-importance/</guid><pubDate>Wed, 05 Feb 2020 20:33:20 GMT</pubDate></item></channel></rss>